[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Resume"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "William Okech",
    "section": "",
    "text": "I am a research scientist with a background in Biomedical Engineering. My primary interests include the following:\n• Synthetic Biology\n• Machine Learning for Health\n• Data Analysis and Visualization\nThis blog aims to promote data-driven decision-making and introduce readers to data analysis and visualization basics. Additionally, I will provide a periodic summary of recent advances in Synthetic Biology and Machine Learning for Health."
  },
  {
    "objectID": "posts/blog_post_1/index.html",
    "href": "posts/blog_post_1/index.html",
    "title": "A Beginner’s Guide to R and RStudio",
    "section": "",
    "text": "Footnotes\n\n\nSummary of the benefits of R and RStudio obtained from Lander, J. P. (2017). R for everyone: Advanced analytics and graphics. Addison-Wesley.↩︎"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog posts",
    "section": "",
    "text": "All Blog Posts\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nA roof over your head\n\n\nThe prevalence of asbestos-based roofing in Kenya and its potential effects\n\n\n\n\nRStudio\n\n\nR\n\n\nData Stories\n\n\nBlog\n\n\nKenya Census\n\n\n\n\n\n\n\n\n\n\n\nDec 1, 2022\n\n\n4 min\n\n\n\n\n\n\n\n\nThe Basics of R and RStudio\n\n\nPart 7: Data Structures\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nNov 16, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\nThe Basics of R and RStudio\n\n\nPart 6: Missing Data\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2022\n\n\n0 min\n\n\n\n\n\n\n\n\nThe Basics of R and RStudio\n\n\nPart 5: Vectors\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nNov 12, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\nThe Basics of R and RStudio\n\n\nPart 4: Operators\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nNov 9, 2022\n\n\n4 min\n\n\n\n\n\n\n\n\nAre there more men than women in Kenya?\n\n\nInsights from the Kenya Population and Housing Census (2019)\n\n\n\n\nRStudio\n\n\nR\n\n\nData Stories\n\n\nBlog\n\n\nKenya Census\n\n\n\n\n\n\n\n\n\n\n\nJun 30, 2022\n\n\n4 min\n\n\n\n\n\n\n\n\nThe Basics of R and RStudio\n\n\nPart 3: Data Types\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nJun 23, 2022\n\n\n6 min\n\n\n\n\n\n\n\n\nThe Basics of R and RStudio\n\n\nPart 2: Variables\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nJun 22, 2022\n\n\n1 min\n\n\n\n\n\n\n\n\nThe Basics of R and RStudio\n\n\nPart 1: Simple Arithmetic\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nJun 15, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\nGetting Started with R and RStudio\n\n\nSoftware Installation\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nJun 8, 2022\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/series_1/new_post_1/post_1.html",
    "href": "posts/series_1/new_post_1/post_1.html",
    "title": "Getting Started with R and RStudio",
    "section": "",
    "text": "Footnotes\n\n\nSummary of the benefits of R and RStudio obtained from Lander, J. P. (2014). R for everyone: Advanced analytics and graphics. Addison-Wesley.↩︎"
  },
  {
    "objectID": "posts/series_1/new_post_1/post_1.html#what-arithmetic-operators-are-used-in-r",
    "href": "posts/series_1/new_post_1/post_1.html#what-arithmetic-operators-are-used-in-r",
    "title": "The Basics of R and RStudio",
    "section": "What arithmetic operators are used in R?",
    "text": "What arithmetic operators are used in R?\nVarious arithmetic operators can be used in R. These operators include:\n\n\n\nArithmetic Operator\nDescription\n\n\n\n\n+\nAddition\n\n\n-\nSubtraction\n\n\n*\nMultiplication\n\n\n/\nDivision\n\n\n** or ^\nExponentiation\n\n\n%%\nModulus (remainder after division)\n\n\n%/%\nInteger division"
  },
  {
    "objectID": "posts/series_1/new_post_1/post_1.html#examples",
    "href": "posts/series_1/new_post_1/post_1.html#examples",
    "title": "The Basics of R and RStudio",
    "section": "Examples",
    "text": "Examples\nAddition\n\n10+30\n\n[1] 40\n\n\nSubtraction\n\n30-24\n\n[1] 6\n\n\nMultiplication\n\n20*4\n\n[1] 80\n\n\nDivision\n\n93/4\n\n[1] 23.25\n\n\nExponentiation\n\n3^6\n\n[1] 729\n\n\nModulus (remainder with division)\n\n94%%5\n\n[1] 4\n\n\nInteger Division\n\n54%/%7\n\n[1] 7\n\n\nSlightly more complex arithmetic operations\n\n5-1+(4*3)/16*3\n\n[1] 6.25"
  },
  {
    "objectID": "posts/series_1/new_post_1/post_1.html#summary",
    "href": "posts/series_1/new_post_1/post_1.html#summary",
    "title": "The Basics of R and RStudio",
    "section": "Summary",
    "text": "Summary\nAfter going through this post, I hope that you can now perform simple arithmetic calculations in R."
  },
  {
    "objectID": "series_1.html",
    "href": "series_1.html",
    "title": "R and RStudio: Getting Started and The Basics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nSoftware Installation\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nJun 8, 2022\n\n\n3 min\n\n\n\n\n\n\n\n\n\nPart 1: Simple Arithmetic\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nJun 15, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\n\nPart 2: Variables\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nJun 22, 2022\n\n\n1 min\n\n\n\n\n\n\n\n\n\nPart 3: Data Types\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nJun 23, 2022\n\n\n6 min\n\n\n\n\n\n\n\n\n\nPart 4: Operators\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nNov 9, 2022\n\n\n4 min\n\n\n\n\n\n\n\n\n\nPart 5: Vectors\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nNov 12, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\n\nPart 6: Missing Data\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2022\n\n\n0 min\n\n\n\n\n\n\n\n\n\nPart 7: Data Structures\n\n\n\n\nRStudio\n\n\nR\n\n\nTutorial\n\n\nBlog\n\n\n\n\n\n\n\n\n\n\n\nNov 16, 2022\n\n\n2 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/series_1/new_post_2/post_2.html",
    "href": "posts/series_1/new_post_2/post_2.html",
    "title": "The Basics of R and RStudio",
    "section": "",
    "text": "This is the first in a series of blog posts looking at the basics of R and RStudio. These programs allow us to perform various basic and complex calculations.\nTo get started, first, we will open R or RStudio. In R, go to the console, and in RStudio, head to the console pane. Next, type in a basic arithmetic calculation such as “1 + 1” after the angle bracket (>) and hit “Enter.”\nAn example of a basic calculation:\n\n1+1\n\n[1] 2\n\n\nThe output will be observed next to the square bracket containing the number 1 ([1]).\n\n\n\n\n\nAdditionally, to include comments into the code block we use the hash (#) symbol. Anything written after the code block will be commented out and not run.\n\n# A simple arithmetic calculation (which is not run because of the hash symbol)\n1+1\n\n[1] 2"
  },
  {
    "objectID": "posts/series_1/new_post_3/post_3.html",
    "href": "posts/series_1/new_post_3/post_3.html",
    "title": "The Basics of R and RStudio",
    "section": "",
    "text": "Variables are instrumental in programming because they are used as “containers” to store data values.\nTo assign a value to a variable, we can use <− or =. However, most R users prefer to use <−."
  },
  {
    "objectID": "posts/series_1/new_post_3/post_3.html#the-assign-and-rm-functions",
    "href": "posts/series_1/new_post_3/post_3.html#the-assign-and-rm-functions",
    "title": "The Basics of R and RStudio",
    "section": "The assign() and rm() functions",
    "text": "The assign() and rm() functions\nIn addition to using the assignment operators (<- and =), we can use the assign() function to assign a value to a variable.\n\nassign(\"variable_6\", 555)\nvariable_6\n\n[1] 555\n\n\nTo remove the assignment of the value to the variable, either delete the variable in the “environment pane” or use the rm() function.\n\nvariable_7 <- 159\n\n\nrm(variable_7)\n\nAfter running rm() look at the environment pane to confirm whether variable_7 has been removed."
  },
  {
    "objectID": "posts/series_1/new_post_2/post_2.html#what-arithmetic-operators-are-used-in-r",
    "href": "posts/series_1/new_post_2/post_2.html#what-arithmetic-operators-are-used-in-r",
    "title": "The Basics of R and RStudio",
    "section": "What arithmetic operators are used in R?",
    "text": "What arithmetic operators are used in R?\nVarious arithmetic operators can be used in R. These operators include:\n\n\n\nArithmetic Operator\nDescription\n\n\n\n\n+\nAddition\n\n\n-\nSubtraction\n\n\n*\nMultiplication\n\n\n/\nDivision\n\n\n** or ^\nExponentiation\n\n\n%%\nModulus (remainder after division)\n\n\n%/%\nInteger division"
  },
  {
    "objectID": "posts/series_1/new_post_2/post_2.html#examples",
    "href": "posts/series_1/new_post_2/post_2.html#examples",
    "title": "The Basics of R and RStudio",
    "section": "Examples",
    "text": "Examples\n\nAddition\n\n10+30\n\n[1] 40\n\n\n\n\nSubtraction\n\n30-24\n\n[1] 6\n\n\n\n\nMultiplication\n\n20*4\n\n[1] 80\n\n\n\n\nDivision\n\n93/4\n\n[1] 23.25\n\n\n\n\nExponentiation\n\n3^6\n\n[1] 729\n\n\n\n\nModulus (remainder with division)\n\n94%%5\n\n[1] 4\n\n\n\n\nInteger Division\n\n54%/%7\n\n[1] 7\n\n\n\n\nSlightly more complex arithmetic operations\n\n5-1+(4*3)/16*3\n\n[1] 6.25"
  },
  {
    "objectID": "posts/series_1/new_post_2/post_2.html#summary",
    "href": "posts/series_1/new_post_2/post_2.html#summary",
    "title": "The Basics of R and RStudio",
    "section": "Summary",
    "text": "Summary\nAfter going through this post, I hope that you can now perform simple arithmetic calculations in R/RStudio."
  },
  {
    "objectID": "posts/series_1/new_post_3/post_3.html#naming-variables",
    "href": "posts/series_1/new_post_3/post_3.html#naming-variables",
    "title": "The Basics of R and RStudio",
    "section": "Naming variables",
    "text": "Naming variables\nAt this point, you may be wondering what conventions are used for naming variables. First, variables need to have meaningful names such as current_temp, time_24_hr, or weight_lbs. However, we need to be mindful of the variable style guide which provides us with the appropriate rules for naming variables.\nSome rules to keep in mind are:\n\nR is case-sensitive (variable is not the same as Variable),\nNames similar to typical outputs or functions (TRUE, FALSE, if, or else) cannot be used,\nAppropriate variable names can contain letters, numbers, dots, and underscores. However, you cannot start with an underscore, number, or dot followed by a number."
  },
  {
    "objectID": "posts/series_1/new_post_3/post_3.html#examples-of-valid-and-invalid-names",
    "href": "posts/series_1/new_post_3/post_3.html#examples-of-valid-and-invalid-names",
    "title": "The Basics of R and RStudio",
    "section": "Examples of valid and invalid names",
    "text": "Examples of valid and invalid names\nValid names\n\ntime_24_hr\n.time24_hr\n\nInvalid names\n\n_24_hr.time\n24_hr_time\n.24_hr_time"
  },
  {
    "objectID": "posts/series_1/new_post_4/post_4.html",
    "href": "posts/series_1/new_post_4/post_4.html",
    "title": "The Basics of R and RStudio",
    "section": "",
    "text": "R and RStudio utilize multiple data types to store different kinds of data.\nThe most common data types in R are listed below.\n\n\n\n\n\n\n\nData Type\nDescription\n\n\n\n\nNumeric\nThe most common data type. The values can be numbers or decimals (all real numbers).\n\n\nInteger\nSpecial case of numeric data without decimals.\n\n\nLogical\nBoolean data type with only 2 values (TRUE or FALSE).\n\n\nComplex\nSpecifies imaginary values in R.\n\n\nCharacter\nAssigns a character or string to a variable. The character variables are enclosed in single quotes (‘character’) while the string variables are enclosed in double quotes (“string”).\n\n\nFactor\nSpecial type of character variable that represents a categorical such as gender.\n\n\nRaw\nSpecifies values as raw bytes. It uses built-in functions to convert between raw and character (charToRaw() or rawToChar()).\n\n\nDates\nSpecifies the date variable. Date stores a date and POSIXct stores a date and time. The output is indicated as the number of days (Date) or number of seconds (POSIXct) since 01/01/1970."
  },
  {
    "objectID": "posts/series_1/new_post_4/post_4.html#data-type-examples",
    "href": "posts/series_1/new_post_4/post_4.html#data-type-examples",
    "title": "The Basics of R and RStudio",
    "section": "Data Type Examples",
    "text": "Data Type Examples\nNumeric\n\n89.98\n\n[1] 89.98\n\n55\n\n[1] 55\n\n\nInteger\n\n5L\n\n[1] 5\n\n5768L\n\n[1] 5768\n\n\nLogical\n\nTRUE\n\n[1] TRUE\n\nFALSE\n\n[1] FALSE\n\n\nComplex\n\n10 + 30i\n\n[1] 10+30i\n\n287 + 34i\n\n[1] 287+34i\n\n\nCharacter or String\n\n'abc'\n\n[1] \"abc\"\n\n\"def\"\n\n[1] \"def\"\n\n\"I like learning R\"\n\n[1] \"I like learning R\"\n\n\nDates\n\n\"2022-06-23 14:39:21 EAT\"\n\n[1] \"2022-06-23 14:39:21 EAT\"\n\n\"2022-06-23\"\n\n[1] \"2022-06-23\""
  },
  {
    "objectID": "posts/series_1/new_post_4/post_4.html#examining-data-types",
    "href": "posts/series_1/new_post_4/post_4.html#examining-data-types",
    "title": "The Basics of R and RStudio",
    "section": "Examining data types",
    "text": "Examining data types\nSeveral functions exist to examine the features of the various data types. These include:\n\ntypeof() – what is the data type of the object (low-level)?\nclass() – what is the data type of the object (high-level)?\nlength() – how long is the object?\nattributes() – any metadata available?\n\nLet’s look at how these functions work with a few examples\n\na <- 45.84\nb <- 858L\nc <- TRUE\nd <- 89 + 34i\ne <- 'abc'\n\nExamine the data type at a low-level with typeof()\n\ntypeof(a)\n\n[1] \"double\"\n\ntypeof(b)\n\n[1] \"integer\"\n\ntypeof(c)\n\n[1] \"logical\"\n\ntypeof(d)\n\n[1] \"complex\"\n\ntypeof(e)\n\n[1] \"character\"\n\n\nExamine the data type at a high-level with class()\n\nclass(a)\n\n[1] \"numeric\"\n\nclass(b)\n\n[1] \"integer\"\n\nclass(c)\n\n[1] \"logical\"\n\nclass(d)\n\n[1] \"complex\"\n\nclass(e)\n\n[1] \"character\"\n\n\nTo test whether the variable is of a specific type, we can use the “is.___()” functions.\nFirst, we test the variable a which is numeric.\n\nis.numeric(a)\n\n[1] TRUE\n\nis.integer(a)\n\n[1] FALSE\n\nis.logical(a)\n\n[1] FALSE\n\nis.character(a)\n\n[1] FALSE\n\n\nSecond, we test the variable c which is logical.\n\nis.numeric(c)\n\n[1] FALSE\n\nis.integer(c)\n\n[1] FALSE\n\nis.logical(c)\n\n[1] TRUE\n\nis.character(c)\n\n[1] FALSE\n\n\nTo convert between data types we can use the “as.___()” functions. These include: as.Date(), as.numeric(), and as.factor(). Additionally, other helpful functions include factor() which adds levels to the data and nchar() which provides the length of the data.\nExamples\n\nas.integer(a)\n\n[1] 45\n\nas.logical(0)\n\n[1] FALSE\n\nas.logical(1)\n\n[1] TRUE\n\nnchar(e)\n\n[1] 3"
  },
  {
    "objectID": "posts/series_1/new_post_2/post_2.html#what-arithmetic-operators-are-available-in-rrstudio",
    "href": "posts/series_1/new_post_2/post_2.html#what-arithmetic-operators-are-available-in-rrstudio",
    "title": "The Basics of R and RStudio",
    "section": "What arithmetic operators are available in R/RStudio?",
    "text": "What arithmetic operators are available in R/RStudio?\nVarious arithmetic operators (listed below) can be used in R/RStudio.\n\n\n\nArithmetic Operator\nDescription\n\n\n\n\n+\nAddition\n\n\n-\nSubtraction\n\n\n*\nMultiplication\n\n\n/\nDivision\n\n\n** or ^\nExponentiation\n\n\n%%\nModulus (remainder after division)\n\n\n%/%\nInteger division"
  },
  {
    "objectID": "posts/series_1/new_post_3/post_3.html#summary",
    "href": "posts/series_1/new_post_3/post_3.html#summary",
    "title": "The Basics of R and RStudio",
    "section": "Summary",
    "text": "Summary\nOverall, variables are very useful for programming in R/RStudio. These variables need to be named appropriately according to accepted conventions."
  },
  {
    "objectID": "series_2.html",
    "href": "series_2.html",
    "title": "Data Stories",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nInsights from the Kenya Population and Housing Census (2019)\n\n\n\n\nRStudio\n\n\nR\n\n\nData Stories\n\n\nBlog\n\n\nKenya Census\n\n\n\n\n\n\n\n\n\n\n\nJun 30, 2022\n\n\n4 min\n\n\n\n\n\n\n\n\n\nThe prevalence of asbestos-based roofing in Kenya and its potential effects\n\n\n\n\nRStudio\n\n\nR\n\n\nData Stories\n\n\nBlog\n\n\nKenya Census\n\n\n\n\n\n\n\n\n\n\n\nDec 1, 2022\n\n\n4 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/series_1/new_post_4/post_4.html#summary",
    "href": "posts/series_1/new_post_4/post_4.html#summary",
    "title": "The Basics of R and RStudio",
    "section": "Summary",
    "text": "Summary"
  },
  {
    "objectID": "posts/series_1/new_post_2/post_2.html#introduction",
    "href": "posts/series_1/new_post_2/post_2.html#introduction",
    "title": "The Basics of R and RStudio",
    "section": "Introduction",
    "text": "Introduction\nThis is the first in a series of blog posts looking at the basics of R and RStudio. These programs allow us to perform various basic and complex calculations. To get started, first, we will open R or RStudio. In R, go to the console, and in RStudio, head to the console pane. Next, type in a basic arithmetic calculation such as “1 + 1” after the angle bracket (>) and hit “Enter.”\nAn example of a basic calculation:\n\n1+1\n\n[1] 2\n\n\nThe output will be observed next to the square bracket containing the number 1 ([1])."
  },
  {
    "objectID": "posts/series_1/new_post_3/post_3.html#introduction",
    "href": "posts/series_1/new_post_3/post_3.html#introduction",
    "title": "The Basics of R and RStudio",
    "section": "Introduction",
    "text": "Introduction\nVariables are instrumental in programming because they are used as “containers” to store data values. To assign a value to a variable, we can use <− or =. However, most R users prefer to use <−.\nExamples of variable assignment\n\nUsing <-\n\n\nvariable_1 <- 5\nvariable_1\n\n[1] 5\n\n\n\nUsing =\n\n\nvariable_2 = 10\nvariable_2\n\n[1] 10\n\n\n\nReverse the value and variable with ->\n\n\n15 -> variable_3\nvariable_3\n\n[1] 15\n\n\n\nAssign two variables to one value\n\n\nvariable_4 <- variable_5 <- 30\nvariable_4\n\n[1] 30\n\nvariable_5\n\n[1] 30\n\n\nThe output of the variable can then be obtained by:\n\nTyping the variable name and then pressing “Enter,”\nTyping “print” with the variable name in brackets, print(variable), and\nTyping “View” with the variable name in brackets, View(variable).\n\nBoth print() and View() are some of the many built-in functions1 available in R.\nIn RStudio, the list of variables that have been loaded can be viewed in the environment pane.\n\n\n\n\n\nA screenshot of the environment pane with the stored variables.\n\nprint(variable_1)\n\n[1] 5\n\n\n\nView(variable_2)\n\nOutput of View() will be seen in the script pane"
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "William Okech",
    "section": "",
    "text": "form\nat:\nrevealjs"
  },
  {
    "objectID": "slides.html#slide-title",
    "href": "slides.html#slide-title",
    "title": "William Okech",
    "section": "slide title",
    "text": "slide title"
  },
  {
    "objectID": "slides.html#next-slide-title",
    "href": "slides.html#next-slide-title",
    "title": "William Okech",
    "section": "next slide title!",
    "text": "next slide title!"
  },
  {
    "objectID": "posts/series_2/new_post_1/post_1.html",
    "href": "posts/series_2/new_post_1/post_1.html",
    "title": "Are there more men than women in Kenya?",
    "section": "",
    "text": "To answer this question, I reviewed the Kenya Population and Housing Census (2019)12 report, which provides data on population by sex and age at the county and sub-county levels. This analysis was inspired by Rose Mintzer-Sweeney’s article “Sex and the Census,” published on the Datawrapper website 3.\nVarious biological, cultural, public health, and economic factors can influence the global human sex ratio. For instance, at birth, the human sex ratio is “male-biased,” with approximately 105 males born per 100 girls. However, with increasing age, the susceptibility to infectious diseases, sex-selective abortions, and higher life expectancies for women can cause fluctuations in the human sex ratio4. The total Kenyan population in 2019 (according to the census) was 47,564,296. When I compared the number of males to females at the national level (Figure 1), I found that there were 98 males for every 100 females in the country5.\nKnowing there were more females than males, I sought to determine whether these differences persisted across all age groups (Figure 2).\nAs expected, I observed a higher number of males compared with females between 0 to 18 years. One reason could be the higher male-to-female ratio seen at birth globally6. Between the ages of 19 to 34 years, the male-to-female ratio decreases rapidly, while from 35 to 56 years, the ratio increases rapidly. The cause of this fluctuation is not apparent, but various public health factors may be responsible for the shifts observed within these age groups. Finally, the number of males compared with females steadily decreases after age 60. One reason for this could be the prevalence of medical conditions that disproportionately affect men. Additionally, the decrease in the number of males to females could result from increases in life expectancy favoring women, as demonstrated by the Economic Survey 2022, which shows that the male life expectancy is 60.6 vs. 66.5 for females7.\nBy focusing on the national human sex ratio, we may assume that the male-to-female ratio across all the regions in Kenya is equal. Kenya has 47 diverse counties with different population densities, climatic conditions, economic opportunities, and levels of development. Not surprisingly, we find (Figure 3) that there is a wide range of human sex ratios (90–120 males per 100 females) across the different counties (administrative units).\nThe highest sex ratio is found in Garissa county (120 males per 100 females), and the lowest is observed in Siaya county (90 males per 100 females). Many counties with low sex ratios (more females) are primarily located in the west of Kenya, and counties with high sex ratios (more males) are found in the north of Kenya. According to the Economic Survey (2022) [^8], male life expectancy in the west of Kenya is the lowest in the country. Homa Bay and Migori recorded a life expectancy of 50.5 years, which was approximately 10 years lower than that of females in the respective counties. This is against a difference of 3 to 5 years lower for males in some of the counties in the north of Kenya.\nWithin each of Kenya’s 47 counties are smaller administrative units known as sub-counties. For the final analysis, I thought it would be interesting to see whether the patterns observed at the county level were consistent across the various sub-counties.\nHaving just observed that counties in the north of Kenya had the highest number of males per 100 females, I was surprised to find that Mandera Central (Mandera County) and Tarbaj (Wajir County) sub-counties in the north were among the sub-counties with the lowest number of males per 100 females (Figure 4). Why females tend to concentrate within specific regions in these two counties may be an interesting aspect to investigate in future studies.\nOverall, many factors may affect the human sex ratio at the county and sub-county levels and cause the differences in the human sex ratio seen with age. High rural-urban migration, public health factors (including the prevalence of various communicable and non-communicable diseases), climate, and location’s primary source of employment may skew the number of males to females in certain sub-counties. Therefore, future investigations should focus on the causes of these variations in the human sex ratio and the implications for administrative planning at the national, county, and sub-county levels."
  },
  {
    "objectID": "posts/series_2/new_post_1/post_1.html#section",
    "href": "posts/series_2/new_post_1/post_1.html#section",
    "title": "Are there more men than women in Kenya?",
    "section": "",
    "text": "[^1] Kenya National Bureau of Statistics. The 2019 Kenya Population and Housing Census. Volume I: Population by County and Sub-County and Volume III: Distribution of Population by Age and Sex. [^2] Shelmith Kariuki (2020). rKenyaCensus: 2019 Kenya Population and Housing Census Results. R package version 0.0.2. [^3] Rose Mintzer-Sweeney’s article: https://blog.datawrapper.de/gender-ratio-american-history/ [^4] Hannah Ritchie and Max Roser (2019) - “Gender Ratio.” Published online at OurWorldInData.org. Retrieved from: ‘https://ourworldindata.org/gender-ratio’ [Online Resource] [^5] Additionally, there were also 1,524 individuals classified as intersex, but their low numbers prevented their inclusion in the analysis. [^6] Kenya National Bureau of Statistics. The Economic Survey 2022"
  },
  {
    "objectID": "practice.html",
    "href": "practice.html",
    "title": "Untitled",
    "section": "",
    "text": "1 + 1"
  },
  {
    "objectID": "resources/data_analysis_tools.html",
    "href": "resources/data_analysis_tools.html",
    "title": "Data Analysis Tools",
    "section": "",
    "text": "Links to helpful websites and tutorials"
  },
  {
    "objectID": "resources/ds_ml_ai.html",
    "href": "resources/ds_ml_ai.html",
    "title": "Data Science, Machine Learning, and Artificial Intelligence Tools",
    "section": "",
    "text": "Environmental and Spatial Data Science\n\n\nSports Data Science"
  },
  {
    "objectID": "resources/non_ac_reading.html",
    "href": "resources/non_ac_reading.html",
    "title": "Non-Academic Reading List",
    "section": "",
    "text": "Interesting Books"
  },
  {
    "objectID": "resources/non_ac_reading.html#interesting-books",
    "href": "resources/non_ac_reading.html#interesting-books",
    "title": "Non-Academic Reading List",
    "section": "Interesting Books",
    "text": "Interesting Books"
  },
  {
    "objectID": "resources/data_analysis_tools.html#python",
    "href": "resources/data_analysis_tools.html#python",
    "title": "Data Analysis Tools",
    "section": "Python",
    "text": "Python"
  },
  {
    "objectID": "resources/data_analysis_tools.html#data-visualization",
    "href": "resources/data_analysis_tools.html#data-visualization",
    "title": "Data Analysis Tools",
    "section": "Data Visualization",
    "text": "Data Visualization"
  },
  {
    "objectID": "resources/data_analysis_tools.html#git-and-github",
    "href": "resources/data_analysis_tools.html#git-and-github",
    "title": "Data Analysis Tools",
    "section": "Git and GitHub",
    "text": "Git and GitHub"
  },
  {
    "objectID": "resources/data_analysis_tools.html#quarto",
    "href": "resources/data_analysis_tools.html#quarto",
    "title": "Data Analysis Tools",
    "section": "Quarto",
    "text": "Quarto"
  },
  {
    "objectID": "resources/ds_ml_ai.html#environmental-and-spatial-data-science",
    "href": "resources/ds_ml_ai.html#environmental-and-spatial-data-science",
    "title": "Data Science, Machine Learning, and Artificial Intelligence Tools",
    "section": "Environmental and Spatial Data Science",
    "text": "Environmental and Spatial Data Science"
  },
  {
    "objectID": "resources/ds_ml_ai.html#sports-data-science",
    "href": "resources/ds_ml_ai.html#sports-data-science",
    "title": "Data Science, Machine Learning, and Artificial Intelligence Tools",
    "section": "Sports Data Science",
    "text": "Sports Data Science"
  },
  {
    "objectID": "resources/reading_list.html#book-recommendations",
    "href": "resources/reading_list.html#book-recommendations",
    "title": "Personal Reading List",
    "section": "Book Recommendations",
    "text": "Book Recommendations"
  },
  {
    "objectID": "resources/biox.html",
    "href": "resources/biox.html",
    "title": "Bio-X: All things Bio",
    "section": "",
    "text": "Links to helpful websites related to Synthetic Biology and Machine Learning for Health"
  },
  {
    "objectID": "resources/data_analysis_tools.html#r-rstudio-and-shiny",
    "href": "resources/data_analysis_tools.html#r-rstudio-and-shiny",
    "title": "Data Analysis Tools",
    "section": "R, RStudio, and Shiny",
    "text": "R, RStudio, and Shiny"
  },
  {
    "objectID": "posts/series_1/new_post_5/post_5.html",
    "href": "posts/series_1/new_post_5/post_5.html",
    "title": "The Basics of R and RStudio",
    "section": "",
    "text": "R has many different types of operators that can perform different tasks.\nHere we will focus on 5 major types of operators. The major types of operators are:\n\nArithmetic,\nRelational,\nLogical,\nAssignment, and\nMiscellaneous."
  },
  {
    "objectID": "posts/series_1/new_post_5/post_5.html#examples",
    "href": "posts/series_1/new_post_5/post_5.html#examples",
    "title": "The Basics of R and RStudio",
    "section": "Examples",
    "text": "Examples\n\nx <- 227\ny <- 639\n\nLess than\n\nx<y\n\n[1] TRUE\n\n\nGreater than\n\nx>y\n\n[1] FALSE\n\n\nLess than or equal to\n\nx <= 300\n\n[1] TRUE\n\n\nGreater than or equal to\n\ny >= 700\n\n[1] FALSE\n\n\nEqual to\n\ny == 639\n\n[1] TRUE\n\n\nNot Equal to\n\nx != 227\n\n[1] FALSE\n\n\n\n3. Logical Operators\nLogical operators are used to specify multiple conditions between objects. Logical operators work with basic data types such as logical, numeric, and complex data types. This returns TRUE or FALSE values. Numbers greater that 1 are TRUE and 0 equals FALSE. The table below describes the most common logical operators.\n\n\n\nLogical Operator\nDescription\n\n\n\n\n!\nLogical NOT\n\n\n|\nElement-wise logical OR\n\n\n||\nLogical OR\n\n\n&\nElement-wise logical AND\n\n\n&&\nLogical AND"
  },
  {
    "objectID": "posts/series_1/new_post_5/post_5.html#examples-1",
    "href": "posts/series_1/new_post_5/post_5.html#examples-1",
    "title": "The Basics of R and RStudio",
    "section": "Examples",
    "text": "Examples\n\nvector_1 <- c(0,2)\nvector_2 <- c(1,0)\n\nLogical NOT\n\n!vector_1\n\n[1]  TRUE FALSE\n\n!vector_2\n\n[1] FALSE  TRUE\n\n\nLogical OR\n\nvector_1 | vector_2\n\n[1] TRUE TRUE\n\n\nLogical AND\n\nvector_1 & vector_2\n\n[1] FALSE FALSE\n\n\nElement-wise logical OR\n\nvector_1 || vector_2\n\n[1] TRUE\n\n\nElement-wise logical AND\n\nvector_1 && vector_2\n\n[1] FALSE\n\n\n\n4. Assignment Operators\nThese operators assign values to variables. A more comprehensive review can be obtained in Part 2 of the series.\n\n\n5. Miscellaneous Operators\nThese are helpful operators for working in that can perform a variety of functions. A few common miscellaneous operators are described below.\n\n\n\n\n\n\n\nMiscellaneous Operator\nDescription\n\n\n\n\n%*%\nMatrix multiplication (to be discussed in subsequent chapters)\n\n\n%in%\nDoes an element belong to a vector\n\n\n:\nGenerate a sequence"
  },
  {
    "objectID": "posts/series_1/new_post_5/post_5.html#examples-2",
    "href": "posts/series_1/new_post_5/post_5.html#examples-2",
    "title": "The Basics of R and RStudio",
    "section": "Examples",
    "text": "Examples\nSequence\n\na <- 1:8\nb <- 4:10\n\nElement in a vector\n\na %in% b\n\n[1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n\n9 %in% b\n\n[1] TRUE\n\n9 %in% a\n\n[1] FALSE"
  },
  {
    "objectID": "posts/series_1/new_post_6/post_6.html",
    "href": "posts/series_1/new_post_6/post_6.html",
    "title": "The Basics of R and RStudio",
    "section": "",
    "text": "A vector is a collection of elements of the same data type, and they are a basic data structure in R programming.\nVectors cannot be of mixed data type. The most common way to create a vector is with c(), where “c” stands for combine. In R, vectors do not have dimensions; therefore, they cannot be defined by columns or rows. Vectors can be divided into atomic vectors and lists (discussed in Part 7). The atomic vectors include logical, character, and numeric (integer or double).\nAdditionally, R is a vectorized language because mathematical operations are applied to each element of the vector without the need to loop through the vector.Examples of vectors are shown below:\n• Numbers: c(2, 10, 16, -5)\n• Characters: c(\"R\", \"RStudio\", \"Shiny\", \"Quarto\")\n• Logicals: c(\"TRUE\", \"FALSE\", \"TRUE\")"
  },
  {
    "objectID": "posts/series_1/new_post_6/post_6.html#vector-operations",
    "href": "posts/series_1/new_post_6/post_6.html#vector-operations",
    "title": "The Basics of R and RStudio",
    "section": "Vector Operations",
    "text": "Vector Operations\nVectors of equal length can be operated on together. If one vector is shorter, it will get recycled, as its elements are repeated until it matches the elements of the longer vector. When using vectors of unequal lengths, it would be ideal if the longer vector is a multiple of the shorter vector.\n\nBasic Vector Operations\n\nvec_1 <- 1:10\n\nvec_1*12 # multiplication\n\n [1]  12  24  36  48  60  72  84  96 108 120\n\nvec_1+12 # addition\n\n [1] 13 14 15 16 17 18 19 20 21 22\n\nvec_1-12 # subtraction\n\n [1] -11 -10  -9  -8  -7  -6  -5  -4  -3  -2\n\nvec_1/3 # division\n\n [1] 0.3333333 0.6666667 1.0000000 1.3333333 1.6666667 2.0000000 2.3333333\n [8] 2.6666667 3.0000000 3.3333333\n\nvec_1^4 # power\n\n [1]     1    16    81   256   625  1296  2401  4096  6561 10000\n\nsqrt(vec_1) # square root\n\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n\n\n\n\nOperations on vectors of equal length\nAdditionally, we can perform operations on two vectors of equal length.\n\nCreate two vectors\n\n\nvec_3 <- 5:14\nvec_3\n\n [1]  5  6  7  8  9 10 11 12 13 14\n\nvec_4 <- 12:3\nvec_4\n\n [1] 12 11 10  9  8  7  6  5  4  3\n\n\n\nPerform various arithmetic operations\n\n\nvec_3 + vec_4\n\n [1] 17 17 17 17 17 17 17 17 17 17\n\nvec_3 - vec_4\n\n [1] -7 -5 -3 -1  1  3  5  7  9 11\n\nvec_3 / vec_4\n\n [1] 0.4166667 0.5454545 0.7000000 0.8888889 1.1250000 1.4285714 1.8333333\n [8] 2.4000000 3.2500000 4.6666667\n\nvec_3 * vec_4\n\n [1] 60 66 70 72 72 70 66 60 52 42\n\nvec_3 ^ vec_4\n\n [1] 244140625 362797056 282475249 134217728  43046721  10000000   1771561\n [8]    248832     28561      2744"
  },
  {
    "objectID": "posts/series_1/new_post_8/post_8.html",
    "href": "posts/series_1/new_post_8/post_8.html",
    "title": "The Basics of R and RStudio",
    "section": "",
    "text": "Data structures in R are tools for storing and organizing multiple values.\nThey help to organize stored data in a way that the data can be used more effectively. Data structures vary according to the number of dimensions and the data types (heterogeneous or homogeneous) contained. The primary data structures are:\n\nVectors (link)\nLists\nData frames\nMatrices\nArrays\nFactors"
  },
  {
    "objectID": "posts/series_1/new_post_8/post_8.html#data-structures",
    "href": "posts/series_1/new_post_8/post_8.html#data-structures",
    "title": "The Basics of R and RStudio",
    "section": "Data structures",
    "text": "Data structures\n\n1. Vectors\nDiscussed in a previous post\n\n\n2. Lists\nLists are objects/containers that hold elements of the same or different types. They can containing strings, numbers, vectors, matrices, functions, or other lists. Lists are created with the list() function\n\nExamples\n\n\na. Three element list\n\nlist_1 <- list(10, 30, 50)\n\n\n\nb. Single element list\n\nlist_2 <- list(c(10, 30, 50))\n\n\n\nc. Three element list\n\nlist_3 <- list(1:3, c(50,40), 3:-5)\n\n\n\nd. List with elements of different types\n\nlist_4 <- list(c(\"a\", \"b\", \"c\"), 5:-1)\n\n\n\ne. List which contains a list\n\nlist_5 <- list(c(\"a\", \"b\", \"c\"), 5:-1, list_1)\n\n\n\nf. Set names for the list elements\n\nnames(list_5)\n\nNULL\n\nnames(list_5) <- c(\"character vector\", \"numeric vector\", \"list\")\nnames(list_5)\n\n[1] \"character vector\" \"numeric vector\"   \"list\"            \n\n\n\n\ng. Access elements\n\nlist_5[[1]]\n\n[1] \"a\" \"b\" \"c\"\n\nlist_5[[\"character vector\"]]\n\n[1] \"a\" \"b\" \"c\"\n\n\n\n\nh. Length of list\n\nlength(list_1)\n\n[1] 3\n\nlength(list_5)\n\n[1] 3\n\n\n\n\n\n3. Data frames\nA data frame is one of the most common data objects used to store tabular data in R. Tabular data has rows representing observations and columns representing variables. Dataframes contain lists of equal-length vectors. Each column holds a different type of data, but within each column, the elements must be of the same type. The most common data frame characteristics are listed below:\n• Columns should have a name;\n• Row names should be unique;\n• Various data can be stored (such as numeric, factor, and character);\n• The individual columns should contain the same number of data items.\n\n\nCreation of data frames\n\nlevel <- c(\"Low\", \"Mid\", \"High\")\nlanguage <- c(\"R\", \"RStudio\", \"Shiny\")\nage <- c(25, 36, 47)\n\ndf_1 <- data.frame(level, language, age)\n\n\n\nFunctions used to manipulate data frames\n\na. Number of rows\n\nnrow(df_1)\n\n[1] 3\n\n\n\n\nb. Number of columns\n\nncol(df_1)\n\n[1] 3\n\n\n\n\nc. Dimensions\n\ndim(df_1)\n\n[1] 3 3\n\n\n\n\nd. Class of data frame\n\nclass(df_1)\n\n[1] \"data.frame\"\n\n\n\n\ne. Column names\n\ncolnames(df_1)\n\n[1] \"level\"    \"language\" \"age\"     \n\n\n\n\nf. Row names\n\nrownames(df_1)\n\n[1] \"1\" \"2\" \"3\"\n\n\n\n\ng. Top and bottom values\n\nhead(df_1, n=2)\n\n  level language age\n1   Low        R  25\n2   Mid  RStudio  36\n\ntail(df_1, n=2)\n\n  level language age\n2   Mid  RStudio  36\n3  High    Shiny  47\n\n\n\n\nh. Access columns\n\ndf_1$level\n\n[1] \"Low\"  \"Mid\"  \"High\"\n\n\n\n\ni. Access individual elements\n\ndf_1[3,2]\n\n[1] \"Shiny\"\n\ndf_1[2, 1:2]\n\n  level language\n2   Mid  RStudio\n\n\n\n\nj. Access columns with index\n\ndf_1[, 3]\n\n[1] 25 36 47\n\ndf_1[, c(\"language\")]\n\n[1] \"R\"       \"RStudio\" \"Shiny\"  \n\n\n\n\nk. Access rows with index\n\ndf_1[2, ]\n\n  level language age\n2   Mid  RStudio  36\n\n\n\n\n\n4. Matrices\nA matrix is a rectangular two-dimensional (2D) homogeneous data set containing rows and columns. It contains real numbers that are arranged in a fixed number of rows and columns. Matrices are generally used for various mathematical and statistical applications.\n\na. Creation of matrices\n\nm1 <- matrix(1:9, nrow = 3, ncol = 3) \nm2 <- matrix(21:29, nrow = 3, ncol = 3) \nm3 <- matrix(1:12, nrow = 2, ncol = 6)\n\n\n\nb. Obtain the dimensions of the matrices\n\n# m1\nnrow(m1)\n\n[1] 3\n\nncol(m1)\n\n[1] 3\n\ndim(m1)\n\n[1] 3 3\n\n# m3\nnrow(m3)\n\n[1] 2\n\nncol(m3)\n\n[1] 6\n\ndim(m3)\n\n[1] 2 6\n\n\n\n\nc. Arithmetic with matrices\n\nm1+m2\n\n     [,1] [,2] [,3]\n[1,]   22   28   34\n[2,]   24   30   36\n[3,]   26   32   38\n\nm1-m2\n\n     [,1] [,2] [,3]\n[1,]  -20  -20  -20\n[2,]  -20  -20  -20\n[3,]  -20  -20  -20\n\nm1*m2\n\n     [,1] [,2] [,3]\n[1,]   21   96  189\n[2,]   44  125  224\n[3,]   69  156  261\n\nm1/m2\n\n           [,1]      [,2]      [,3]\n[1,] 0.04761905 0.1666667 0.2592593\n[2,] 0.09090909 0.2000000 0.2857143\n[3,] 0.13043478 0.2307692 0.3103448\n\nm1 == m2\n\n      [,1]  [,2]  [,3]\n[1,] FALSE FALSE FALSE\n[2,] FALSE FALSE FALSE\n[3,] FALSE FALSE FALSE\n\n\n\n\nd. Matrix multiplication\n\nm5 <- matrix(1:10, nrow = 5)\nm6 <- matrix(43:34, nrow = 5)\n\nm5*m6\n\n     [,1] [,2]\n[1,]   43  228\n[2,]   84  259\n[3,]  123  288\n[4,]  160  315\n[5,]  195  340\n\n# m5%*%m6 will not work because of the dimesions.\n# the vector m6 needs to be transposed.\n\n# Transpose\nm5%*%t(m6)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]  271  264  257  250  243\n[2,]  352  343  334  325  316\n[3,]  433  422  411  400  389\n[4,]  514  501  488  475  462\n[5,]  595  580  565  550  535\n\n\n\n\ne. Generate an identity matrix\n\ndiag(5)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    1    0    0    0\n[3,]    0    0    1    0    0\n[4,]    0    0    0    1    0\n[5,]    0    0    0    0    1\n\n\n\n\nf. Column and row names\n\ncolnames(m5)\n\nNULL\n\nrownames(m6)\n\nNULL\n\n\n\n\n\n5. Arrays\nAn array is a multidimensional vector that stores homogeneous data. It can be thought of as a stacked matrix and stores data in more than 2 dimensions (n-dimensional). An array is composed of rows by columns by dimensions. Example: an array with dimensions, dim = c(2,3,3), has 2 rows, 3 columns, and 3 matrices.\n\na. Creating arrays\n\narr_1 <- array(1:12, dim = c(2,3,2))\n\narr_1\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12\n\n\n\n\nb. Filter array by index\n\narr_1[1, , ]\n\n     [,1] [,2]\n[1,]    1    7\n[2,]    3    9\n[3,]    5   11\n\narr_1[1, ,1]\n\n[1] 1 3 5\n\narr_1[, , 1]\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\n\n\n6. Factors\nFactors are used to store integers or strings which are categorical. They categorize data and store the data in different levels. This form of data storage is useful for statistical modeling. Examples include TRUE or FALSE and male or female.\n\nvector <- c(\"Male\", \"Female\")\nfactor_1 <- factor(vector)\nfactor_1\n\n[1] Male   Female\nLevels: Female Male\n\n\nOR\n\nfactor_2 <- as.factor(vector)\nfactor_2\n\n[1] Male   Female\nLevels: Female Male\n\nas.numeric(factor_2)\n\n[1] 2 1"
  },
  {
    "objectID": "posts/series_1/new_post_8/post_8.html#supplementary-reading",
    "href": "posts/series_1/new_post_8/post_8.html#supplementary-reading",
    "title": "The Basics of R and RStudio",
    "section": "Supplementary Reading",
    "text": "Supplementary Reading\nComing soon…"
  },
  {
    "objectID": "posts/series_1/new_post_7/post_7.html",
    "href": "posts/series_1/new_post_7/post_7.html",
    "title": "The Basics of R and RStudio",
    "section": "",
    "text": "R has two types of missing data, NA and NULL.1"
  },
  {
    "objectID": "posts/series_1/new_post_7/post_7.html#na",
    "href": "posts/series_1/new_post_7/post_7.html#na",
    "title": "The Basics of R and RStudio",
    "section": "NA",
    "text": "NA\nR uses NA to represent missing data. The NA appears as another element of a vector. To test each element for missingness we use is.na(). Generally, we can use tools such as mi, mice, and Amelia (which will be discussed later) to deal with missing data. The deletion of this missing data may lead to bias or data loss, so we need to be very careful when handling it. In subsequent blog posts, we will look at the use of imputation to deal with missing data."
  },
  {
    "objectID": "posts/series_1/new_post_7/post_7.html#null",
    "href": "posts/series_1/new_post_7/post_7.html#null",
    "title": "The Basics of R and RStudio",
    "section": "NULL",
    "text": "NULL\nNULL represents nothingness or the “absence of anything”. 2\nIt does not mean missing but represents nothing. NULL cannot exist within a vector because it disappears."
  },
  {
    "objectID": "posts/series_1/new_post_7/post_7.html#supplementary-reading",
    "href": "posts/series_1/new_post_7/post_7.html#supplementary-reading",
    "title": "The Basics of R and RStudio",
    "section": "Supplementary Reading",
    "text": "Supplementary Reading\n\nAn excellent post from the blog “Data Science by Design” on the role of missingness."
  },
  {
    "objectID": "posts/series_1/new_post_6/post_6.html#sequence-generation",
    "href": "posts/series_1/new_post_6/post_6.html#sequence-generation",
    "title": "The Basics of R and RStudio",
    "section": "Sequence Generation",
    "text": "Sequence Generation\nTo generate a vector with a sequence of consecutive numbers, we can use :, sequence(), or seq().\n\nGenerate a sequence using :\n\na <- 9:18\na\n\n [1]  9 10 11 12 13 14 15 16 17 18\n\na_rev <- 18:9\na_rev\n\n [1] 18 17 16 15 14 13 12 11 10  9\n\na_rev_minus <- 5:-3\na_rev_minus\n\n[1]  5  4  3  2  1  0 -1 -2 -3\n\n\n\n\nGenerate a sequence using sequence()\n\nb <- sequence(7)\nb\n\n[1] 1 2 3 4 5 6 7\n\nc <- sequence(c(5,9))\nc\n\n [1] 1 2 3 4 5 1 2 3 4 5 6 7 8 9\n\n\n\n\nGenerate a sequence using seq()\nThe seq() function has four main arguments: seq(from, to, by, length.out), where “from” and “to” are the starting and ending elements of the sequence. Additionally, “by” is the difference between the elements, and “length.out” is the maximum length of the vector.\n\nd <- seq(2,20,by=2)\nd\n\n [1]  2  4  6  8 10 12 14 16 18 20\n\nf <- seq(2,20, length.out=5)\nf\n\n[1]  2.0  6.5 11.0 15.5 20.0\n\nh <- seq(20,2,by=-2)\nh\n\n [1] 20 18 16 14 12 10  8  6  4  2\n\nj <- seq(20, 2, length.out=3)\nj\n\n[1] 20 11  2"
  },
  {
    "objectID": "posts/series_1/new_post_6/post_6.html#repeating-vectors",
    "href": "posts/series_1/new_post_6/post_6.html#repeating-vectors",
    "title": "The Basics of R and RStudio",
    "section": "Repeating vectors",
    "text": "Repeating vectors\nTo create a repeating vector, we can use rep().\n\nk <- rep(c(0,3,6), times = 3)\nk\n\n[1] 0 3 6 0 3 6 0 3 6\n\nl <- rep(2:6, each = 3)\nl\n\n [1] 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6\n\nm <- rep(7:10, length.out = 20)\nm\n\n [1]  7  8  9 10  7  8  9 10  7  8  9 10  7  8  9 10  7  8  9 10"
  },
  {
    "objectID": "posts/series_1/new_post_6/post_6.html#functions-that-can-be-applied-to-vectors",
    "href": "posts/series_1/new_post_6/post_6.html#functions-that-can-be-applied-to-vectors",
    "title": "The Basics of R and RStudio",
    "section": "Functions that can be applied to vectors",
    "text": "Functions that can be applied to vectors\nThe functions listed below can be applied to vectors:\n\nany()\nall()\nnchar()\nlength()\ntypeof()\n\n\nExamples\n\nany(vec_3 > vec_4)\n\n[1] TRUE\n\nany(vec_3 < vec_4)\n\n[1] TRUE\n\n\n\nall(vec_3 > vec_4)\n\n[1] FALSE\n\nall(vec_3 < vec_4)\n\n[1] FALSE\n\n\n\nlength(vec_3)\n\n[1] 10\n\nlength(vec_4)\n\n[1] 10\n\n\n\ntypeof(vec_3)\n\n[1] \"integer\"\n\ntypeof(vec_4)\n\n[1] \"integer\"\n\n\nDetermine the number of letters in a character\n\nvec_5 <- c(\"R\", \"RStudio\", \"Shiny\", \"Quarto\")\nnchar(vec_5)\n\n[1] 1 7 5 6"
  },
  {
    "objectID": "posts/series_1/new_post_6/post_6.html#recycling-of-vectors",
    "href": "posts/series_1/new_post_6/post_6.html#recycling-of-vectors",
    "title": "The Basics of R and RStudio",
    "section": "Recycling of vectors",
    "text": "Recycling of vectors\n\nvec_3 + c(10, 20)\n\n [1] 15 26 17 28 19 30 21 32 23 34\n\nvec_3 + c(10, 20, 30) # will result in a warning as the longer vector is not a multiple of the shorter one\n\nWarning in vec_3 + c(10, 20, 30): longer object length is not a multiple of\nshorter object length\n\n\n [1] 15 26 37 18 29 40 21 32 43 24"
  },
  {
    "objectID": "posts/series_1/new_post_6/post_6.html#accessing-elements-of-a-vector",
    "href": "posts/series_1/new_post_6/post_6.html#accessing-elements-of-a-vector",
    "title": "The Basics of R and RStudio",
    "section": "Accessing elements of a vector",
    "text": "Accessing elements of a vector\nTo access the elements of a vector, we can use numeric-, character-, or logical-based indexing.\n\nExamples\n\n1. Name the columns of a vector with names().\nCreate the vector.\n\nvec_name <- 1:5\nvec_name\n\n[1] 1 2 3 4 5\n\n\nName the individual elements.\n\nnames(vec_name) <- c(\"a\", \"c\", \"e\", \"g\", \"i\")\nvec_name\n\na c e g i \n1 2 3 4 5 \n\n\n\n\n2. Use the vector index to filter\n\nvec_index <- 1:5\nvec_index\n\n[1] 1 2 3 4 5\n\n\n\na) Logical vector as an index\n\nvec_index[c(TRUE, FALSE, TRUE, FALSE, TRUE)]\n\n[1] 1 3 5\n\n\n\n\nb) Filter vector based on an index\n\nvec_index[1:3]\n\n[1] 1 2 3\n\n\n\n\nc) Access a vector using its position\n\nvec_index[4]\n\n[1] 4\n\nvec_index[c(2,4)]\n\n[1] 2 4\n\n\n\n\nd) Modify a vector using indexing\n\nvec_index\n\n[1] 1 2 3 4 5\n\nvec_index[5] <- 1000\nvec_index\n\n[1]    1    2    3    4 1000"
  },
  {
    "objectID": "posts/series_1/new_post_2/post_2.html#arithmetic-operators-available-in-rrstudio",
    "href": "posts/series_1/new_post_2/post_2.html#arithmetic-operators-available-in-rrstudio",
    "title": "The Basics of R and RStudio",
    "section": "Arithmetic operators available in R/RStudio",
    "text": "Arithmetic operators available in R/RStudio\nVarious arithmetic operators (listed below) can be used in R/RStudio.\n\n\n\nArithmetic Operator\nDescription\n\n\n\n\n+\nAddition\n\n\n-\nSubtraction\n\n\n*\nMultiplication\n\n\n/\nDivision\n\n\n** or ^\nExponentiation\n\n\n%%\nModulus (remainder after division)\n\n\n%/%\nInteger division"
  },
  {
    "objectID": "posts/series_1/new_post_2/post_2.html#supplementary-reading",
    "href": "posts/series_1/new_post_2/post_2.html#supplementary-reading",
    "title": "The Basics of R and RStudio",
    "section": "Supplementary Reading",
    "text": "Supplementary Reading\nComing soon…"
  },
  {
    "objectID": "posts/series_1/new_post_3/post_3.html#valid-and-invalid-names",
    "href": "posts/series_1/new_post_3/post_3.html#valid-and-invalid-names",
    "title": "The Basics of R and RStudio",
    "section": "Valid and invalid names",
    "text": "Valid and invalid names\n\nValid names:\n\ntime_24_hr\n.time24_hr\n\n\n\nInvalid names:\n\n_24_hr.time\n24_hr_time\n.24_hr_time"
  },
  {
    "objectID": "posts/series_1/new_post_3/post_3.html#supplementary-reading",
    "href": "posts/series_1/new_post_3/post_3.html#supplementary-reading",
    "title": "The Basics of R and RStudio",
    "section": "Supplementary Reading",
    "text": "Supplementary Reading\nComing soon…"
  },
  {
    "objectID": "posts/series_1/new_post_4/post_4.html#data-types",
    "href": "posts/series_1/new_post_4/post_4.html#data-types",
    "title": "The Basics of R and RStudio",
    "section": "Data types",
    "text": "Data types\n\n1. Numeric\n\n89.98\n\n[1] 89.98\n\n55\n\n[1] 55\n\n\n\n\n2. Integer\n\n5L\n\n[1] 5\n\n5768L\n\n[1] 5768\n\n\n\n\n3. Logical\n\nTRUE\n\n[1] TRUE\n\nFALSE\n\n[1] FALSE\n\n\n\n\n4. Complex\n\n10 + 30i\n\n[1] 10+30i\n\n287 + 34i\n\n[1] 287+34i\n\n\n\n\n5. Character or String\n\n'abc'\n\n[1] \"abc\"\n\n\"def\"\n\n[1] \"def\"\n\n\"I like learning R\"\n\n[1] \"I like learning R\"\n\n\n\n\n6. Dates\n\n\"2022-06-23 14:39:21 EAT\"\n\n[1] \"2022-06-23 14:39:21 EAT\"\n\n\"2022-06-23\"\n\n[1] \"2022-06-23\""
  },
  {
    "objectID": "posts/series_1/new_post_4/post_4.html#examining-various-data-types",
    "href": "posts/series_1/new_post_4/post_4.html#examining-various-data-types",
    "title": "The Basics of R and RStudio",
    "section": "Examining various data types",
    "text": "Examining various data types\nSeveral functions exist to examine the features of the various data types. These include:\n\ntypeof() – what is the data type of the object (low-level)?\nclass() – what is the data type of the object (high-level)?\nlength() – how long is the object?\nattributes() – any metadata available?\n\nLet’s look at how these functions work with a few examples\n\na <- 45.84\nb <- 858L\nc <- TRUE\nd <- 89 + 34i\ne <- 'abc'\n\n\n1. Examine the data type at a low-level with typeof()\n\ntypeof(a)\n\n[1] \"double\"\n\ntypeof(b)\n\n[1] \"integer\"\n\ntypeof(c)\n\n[1] \"logical\"\n\ntypeof(d)\n\n[1] \"complex\"\n\ntypeof(e)\n\n[1] \"character\"\n\n\n\n\n2. Examine the data type at a high-level with class()\n\nclass(a)\n\n[1] \"numeric\"\n\nclass(b)\n\n[1] \"integer\"\n\nclass(c)\n\n[1] \"logical\"\n\nclass(d)\n\n[1] \"complex\"\n\nclass(e)\n\n[1] \"character\"\n\n\n\n\n3. Use the is.____() functions to determine the data type\nTo test whether the variable is of a specific type, we can use the is.____() functions.\nFirst, we test the variable a which is numeric.\n\nis.numeric(a)\n\n[1] TRUE\n\nis.integer(a)\n\n[1] FALSE\n\nis.logical(a)\n\n[1] FALSE\n\nis.character(a)\n\n[1] FALSE\n\n\nSecond, we test the variable c which is logical.\n\nis.numeric(c)\n\n[1] FALSE\n\nis.integer(c)\n\n[1] FALSE\n\nis.logical(c)\n\n[1] TRUE\n\nis.character(c)\n\n[1] FALSE"
  },
  {
    "objectID": "posts/series_1/new_post_4/post_4.html#converting-between-various-data-types",
    "href": "posts/series_1/new_post_4/post_4.html#converting-between-various-data-types",
    "title": "The Basics of R and RStudio",
    "section": "Converting between various data types",
    "text": "Converting between various data types\nTo convert between data types we can use the as.____() functions. These include: as.Date(), as.numeric(), and as.factor(). Additionally, other helpful functions include factor() which adds levels to the data and nchar() which provides the length of the data.\n\nExamples\n\nas.integer(a)\n\n[1] 45\n\nas.logical(0)\n\n[1] FALSE\n\nas.logical(1)\n\n[1] TRUE\n\nnchar(e)\n\n[1] 3"
  },
  {
    "objectID": "posts/series_1/new_post_4/post_4.html#supplementary-reading",
    "href": "posts/series_1/new_post_4/post_4.html#supplementary-reading",
    "title": "The Basics of R and RStudio",
    "section": "Supplementary Reading",
    "text": "Supplementary Reading\nComing soon…"
  },
  {
    "objectID": "posts/series_1/new_post_5/post_5.html#arithmetic-operators",
    "href": "posts/series_1/new_post_5/post_5.html#arithmetic-operators",
    "title": "The Basics of R and RStudio",
    "section": "1. Arithmetic Operators",
    "text": "1. Arithmetic Operators\nArithmetic operators are used to perform mathematical operations. These operators have been highlighted in Part 1 of the series."
  },
  {
    "objectID": "posts/series_1/new_post_5/post_5.html#relational-operators",
    "href": "posts/series_1/new_post_5/post_5.html#relational-operators",
    "title": "The Basics of R and RStudio",
    "section": "2. Relational Operators",
    "text": "2. Relational Operators\nRelational operators are used to find the relationship between 2 variables and compare objects. The output of these comparisons is Boolean (TRUE or FALSE). The table below describes the most common relational operators.\n\n\n\nRelational Operator\nDescription\n\n\n\n\n<\nLess than\n\n\n>\nGreater than\n\n\n<=\nLess than or equal to\n\n\n>=\nGreater than or equal to\n\n\n==\nEqual to\n\n\n!=\nNot Equal to\n\n\n\nAssign values to variables\n\nx <- 227\ny <- 639\n\n\na. Less than\n\nx < y\n\n[1] TRUE\n\n\n\n\nb. Greater than\n\nx > y\n\n[1] FALSE\n\n\n\n\nc. Less than or equal to\n\nx <= 300\n\n[1] TRUE\n\n\n\n\nd. Greater than or equal to\n\ny >= 700\n\n[1] FALSE\n\n\n\n\ne. Equal to\n\ny == 639\n\n[1] TRUE\n\n\n\n\nf. Not Equal to\n\nx != 227\n\n[1] FALSE"
  },
  {
    "objectID": "posts/series_1/new_post_5/post_5.html#logical-operators",
    "href": "posts/series_1/new_post_5/post_5.html#logical-operators",
    "title": "The Basics of R and RStudio",
    "section": "3. Logical Operators",
    "text": "3. Logical Operators\nLogical operators are used to specify multiple conditions between objects. Logical operators work with basic data types such as logical, numeric, and complex data types. This returns TRUE or FALSE values. Numbers greater that 1 are TRUE and 0 equals FALSE. The table below describes the most common logical operators.\n\n\n\nLogical Operator\nDescription\n\n\n\n\n!\nLogical NOT\n\n\n|\nElement-wise logical OR\n\n\n||\nLogical OR\n\n\n&\nElement-wise logical AND\n\n\n&&\nLogical AND\n\n\n\nAssign vectors to variables\n\nvector_1 <- c(0,2)\nvector_2 <- c(1,0)\n\n\na. Logical NOT\n\n!vector_1\n\n[1]  TRUE FALSE\n\n!vector_2\n\n[1] FALSE  TRUE\n\n\n\n\nb. Logical OR\n\nvector_1 | vector_2\n\n[1] TRUE TRUE\n\n\n\n\nc. Logical AND\n\nvector_1 & vector_2\n\n[1] FALSE FALSE\n\n\n\n\nd. Element-wise logical OR\n\nvector_1 || vector_2\n\n[1] TRUE\n\n\n\n\nd. Element-wise logical AND\n\nvector_1 && vector_2\n\n[1] FALSE"
  },
  {
    "objectID": "posts/series_1/new_post_5/post_5.html#assignment-operators",
    "href": "posts/series_1/new_post_5/post_5.html#assignment-operators",
    "title": "The Basics of R and RStudio",
    "section": "4. Assignment Operators",
    "text": "4. Assignment Operators\nThese operators assign values to variables. A more comprehensive review can be obtained in Part 2 of the series."
  },
  {
    "objectID": "posts/series_1/new_post_5/post_5.html#miscellaneous-operators",
    "href": "posts/series_1/new_post_5/post_5.html#miscellaneous-operators",
    "title": "The Basics of R and RStudio",
    "section": "5. Miscellaneous Operators",
    "text": "5. Miscellaneous Operators\nThese are helpful operators for working in that can perform a variety of functions. A few common miscellaneous operators are described below.\n\n\n\n\n\n\n\nMiscellaneous Operator\nDescription\n\n\n\n\n%*%\nMatrix multiplication (to be discussed in subsequent chapters)\n\n\n%in%\nDoes an element belong to a vector\n\n\n:\nGenerate a sequence\n\n\n\n\na. Sequence\n\na <- 1:8\na\n\n[1] 1 2 3 4 5 6 7 8\n\nb <- 4:10\nb\n\n[1]  4  5  6  7  8  9 10\n\n\n\n\nb. Element in a vector\n\na %in% b\n\n[1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n\n9 %in% b\n\n[1] TRUE\n\n9 %in% a\n\n[1] FALSE"
  },
  {
    "objectID": "posts/series_1/new_post_5/post_5.html#supplementary-reading",
    "href": "posts/series_1/new_post_5/post_5.html#supplementary-reading",
    "title": "The Basics of R and RStudio",
    "section": "Supplementary Reading",
    "text": "Supplementary Reading\nComing soon…"
  },
  {
    "objectID": "posts/series_1/new_post_3/post_3.html#variable-assignment",
    "href": "posts/series_1/new_post_3/post_3.html#variable-assignment",
    "title": "The Basics of R and RStudio",
    "section": "Variable assignment",
    "text": "Variable assignment\n\n1. Using <-\n\nvariable_1 <- 5\nvariable_1\n\n[1] 5\n\n\n\n\n2. Using =\n\nvariable_2 = 10\nvariable_2\n\n[1] 10\n\n\n\n\n3. Reverse the value and variable with ->\n\n15 -> variable_3\nvariable_3\n\n[1] 15\n\n\n\n\n4. Assign two variables to one value\n\nvariable_4 <- variable_5 <- 30\nvariable_4\n\n[1] 30\n\nvariable_5\n\n[1] 30"
  },
  {
    "objectID": "posts/series_1/new_post_3/post_3.html#variable-output",
    "href": "posts/series_1/new_post_3/post_3.html#variable-output",
    "title": "The Basics of R and RStudio",
    "section": "Variable output",
    "text": "Variable output\nThe output of the variable can then be obtained by:\n\nTyping the variable name and then pressing “Enter,”\nTyping “print” with the variable name in brackets, print(variable), and\nTyping “View” with the variable name in brackets, View(variable).\n\nBoth print() and View() are some of the many built-in functions1 available in R.\nIn RStudio, the list of variables that have been loaded can be viewed in the environment pane.\n\n\n\n\n\nA screenshot of the environment pane with the stored variables.\n\nprint(variable_1)\n\n[1] 5\n\n\n\nView(variable_2)\n\nOutput of View() will be seen in the script pane"
  },
  {
    "objectID": "posts/series_2/new_post_2/post_2.html",
    "href": "posts/series_2/new_post_2/post_2.html",
    "title": "A roof over your head",
    "section": "",
    "text": "Asbestos and its potential risks\nAsbestos refers to a class of six minerals that naturally form a bundle of fibers. These fibers have many properties that make them attractive, including a lack of electrical conductivity, and chemical, heat, and fire resistance. Historically, asbestos has been used for various commercial and industrial applications, including roofing shingles, automobile brakes, and textured paints for walls and ceilings 3. However, using asbestos for products that come into regular contact with humans is quite problematic. Why? Asbestos is a known human carcinogen, and the primary risk factor for most mesotheliomas is asbestos exposure 4 5. Furthermore, asbestos exposure (depending on the frequency, amount, and type) can cause asbestosis, pleural disease, and cancer. If asbestos-based materials remain intact, there is minimal risk to the user, but if materials are damaged via natural degradation or during home demolition and remodeling, tiny asbestos fibers will be released into the air 6 7. In Kenya, Legal Notice No. 121 of the Environmental Management and Coordination (Waste Management) Regulations (2006)8 states that waste containing asbestos is classified as hazardous. Why should Kenyans be concerned about this? In the 2013/2014 financial year, Kenya spent approximately one-tenth of its total health budget on asbestos-related cancers 9 10 11.\nWhere do we find high numbers of asbestos-based roofs in Kenya? As previously stated, 1.4% of households in Kenya have asbestos-based roofs. Figure 2 demonstrates the percentage of households with asbestos-based roofs in every county in Kenya. Interestingly, 4 (Nairobi, Kajiado, Machakos, and Kiambu) out of the top 6 counties (from a total of 47) fall within the Nairobi Metropolitan region.\n\n\nWhere do we find high numbers of asbestos-based roofs in Kenya?\nAs previously stated, 1.4% of households in Kenya have asbestos-based roofs. Figure 2 demonstrates the percentage of households with asbestos-based roofs in every county in Kenya. Interestingly, 4 (Nairobi, Kajiado, Machakos, and Kiambu) out of the top 6 counties (from a total of 47) fall within the Nairobi Metropolitan region.\n\n\n\n\n\nFigure 2: Percentage(%) of households with asbestos-based roofs distributed by county (visualizations generated using RStudio)\nNext, I investigated the subcounties with the highest number of households with asbestos-based roofs. The top 5 subcounties are located within Nairobi county, with Embakasi subcounty taking the lead with just over 8,000 households.\n\n\n\n\n\nFigure 3: The top ten subcounties with the highest number of households that have asbestos-based roofs (visualizations generated using RStudio)\n\n\nConclusion\nOverall, this study demonstrates that a notable proportion of Kenyan households used asbestos-based roofing materials, with Nairobi Metropolitan county accounting for the largest number of households. It is widely acknowledged that asbestos is harmful to our health, and asbestos-related diseases impose a significant burden on the economy. However, the impact of these roofs on the health of residents may not be fully apparent as asbestos exposure may also occur in various settings such as educational facilities and government institutions. To lessen the impact of asbestos exposure, it would be beneficial for local/county governments to educate residents about the dangers of asbestos and facilitate the complex and costly removal of asbestos-based roofing materials.\n\n\n\n\n\nFootnotes\n\n\nKenya National Bureau of Statistics. The 2019 Kenya Population and Housing Census. Volume I: Population by County and Sub-County and Volume III: Distribution of Population by Age and Sex.↩︎\nShelmith Kariuki (2020). rKenyaCensus: 2019 Kenya Population and Housing Census Results. R package version 0.0.2.↩︎\nLearn About Asbestos (no date) EPA. Environmental Protection Agency. Available at: https://www.epa.gov/asbestos/learn-about-asbestos (Accessed: December 1, 2022).↩︎\nAsbestos exposure and cancer risk fact sheet (no date) National Cancer Institute. Available at: https://www.cancer.gov/about-cancer/causes-prevention/risk/substances/asbestos/asbestos-fact-sheet (Accessed: December 1, 2022).↩︎\nAsbestos (no date) World Health Organization. World Health Organization. Available at: https://www.iarc.who.int/risk-factor/asbestos/ (Accessed: December 1, 2022).↩︎\nLearn About Asbestos (no date) EPA. Environmental Protection Agency. Available at: https://www.epa.gov/asbestos/learn-about-asbestos (Accessed: December 1, 2022).↩︎\nAsbestos and your health (2016) Centers for Disease Control and Prevention. Centers for Disease Control and Prevention. Available at: https://www.atsdr.cdc.gov/asbestos/index.html (Accessed: December 1, 2022).↩︎\nAct Title: ENVIRONMENTAL MANAGEMENT AND CO-ORDINATION (no date) No. 8 of 1999. Available at: http://kenyalaw.org:8181/exist/kenyalex/sublegview.xql?subleg=No.+8+of+1999 (Accessed: December 1, 2022).↩︎\nOkoth, D. (2013) Slow transition from use of asbestos raises concern as cancer cases rise, The Standard. Available at: https://www.standardmedia.co.ke/lifestyle/article/2000096118/slow-transition-from-use-of-asbestos-raises-concern-as-cancer-cases-rise (Accessed: December 1, 2022).↩︎\nGCR, S. (2016) Kenya faces cancer epidemic caused by asbestos roofs, Global Construction Review. Available at: https://www.globalconstructionreview.com/kenya-faces-cancer-epid7emic-caus7ed-asbe7stos/ (Accessed: December 1, 2022).↩︎\nIrungu, S. (2020) Exposure to the noxious asbestos needs to be alleviated with a lot of care, Kenya Climate Innovation Center (KCIC). Available at: https://www.kenyacic.org/2019/11/exposure-to-the-noxious-asbestos-needs-to-be-alleviated-with-a-lot-of-care/ (Accessed: December 1, 2022).↩︎"
  }
]