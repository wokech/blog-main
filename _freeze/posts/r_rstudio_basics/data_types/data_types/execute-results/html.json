{
  "hash": "422f19d53489a0b7f72a6fc11e2e947b",
  "result": {
    "markdown": "---\ntitle: \"The Basics of R and RStudio\"\nsubtitle: \"Part 3: Data Types\"\nauthor: \"William Okech\"\ndate: \"2022-06-23\"\nimage: \"r_and_rstudio.png\"\ncategories: [RStudio, R, Tutorial, Blog]\ntoc: true\ndraft: false\n---\n\n\n## Introduction\n\nR and RStudio utilize multiple data types to store different kinds of data.\n\nThe most common data types in R are listed below.\n\n| **Data Type** | **Description**                                                                                                                                                                           |\n|---------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Numeric       | The most common data type. The values can be numbers or decimals (all real numbers).                                                                                                      |\n| Integer       | Special case of numeric data without decimals.                                                                                                                                            |\n| Logical       | Boolean data type with only 2 values (`TRUE` or `FALSE`).                                                                                                                                 |\n| Complex       | Specifies imaginary values in R.                                                                                                                                                          |\n| Character     | Assigns a character or string to a variable. The character variables are enclosed in single quotes ('character') while the string variables are enclosed in double quotes (\"string\").     |\n| Factor        | Special type of character variable that represents a categorical such as gender.                                                                                                          |\n| Raw           | Specifies values as raw bytes. It uses built-in functions to convert between raw and character (charToRaw() or rawToChar()).                                                              |\n| Dates         | Specifies the date variable. Date stores a date and POSIXct stores a date and time. The output is indicated as the number of days (Date) or number of seconds (POSIXct) since 01/01/1970. |\n\n## Data types\n\n### 1. Numeric\n\n\n::: {.cell}\n\n```{.r .cell-code}\n89.98\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 89.98\n```\n:::\n\n```{.r .cell-code}\n55\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n:::\n\n\n### 2. Integer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5L\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n5768L\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5768\n```\n:::\n:::\n\n\n### 3. Logical\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nFALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n### 4. Complex\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 + 30i\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10+30i\n```\n:::\n\n```{.r .cell-code}\n287 + 34i\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 287+34i\n```\n:::\n:::\n\n\n### 5. Character or String\n\n\n::: {.cell}\n\n```{.r .cell-code}\n'abc'\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abc\"\n```\n:::\n\n```{.r .cell-code}\n\"def\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"def\"\n```\n:::\n\n```{.r .cell-code}\n\"I like learning R\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"I like learning R\"\n```\n:::\n:::\n\n\n### 6. Dates\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"2022-06-23 14:39:21 EAT\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-06-23 14:39:21 EAT\"\n```\n:::\n\n```{.r .cell-code}\n\"2022-06-23\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-06-23\"\n```\n:::\n:::\n\n\n## Examining various data types\n\nSeveral functions exist to examine the features of the various data types. These include:\n\n1.  `typeof()` -- what is the data type of the object (low-level)?\n2.  `class()` -- what is the data type of the object (high-level)?\n3.  `length()` -- how long is the object?\n4.  `attributes()` -- any metadata available?\n\nLet's look at how these functions work with a few examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 45.84\nb <- 858L\nc <- TRUE\nd <- 89 + 34i\ne <- 'abc'\n```\n:::\n\n\n### 1. Examine the data type at a low-level with `typeof()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"complex\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n### 2. Examine the data type at a high-level with `class()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nclass(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nclass(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"complex\"\n```\n:::\n\n```{.r .cell-code}\nclass(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n### 3. Use the `is.____()` functions to determine the data type\n\nTo test whether the variable is of a specific type, we can use the `is.____()` functions.\n\nFirst, we test the variable `a` which is numeric.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.numeric(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.integer(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.logical(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.character(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nSecond, we test the variable `c` which is logical.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.numeric(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.integer(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.logical(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.character(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## Converting between various data types\n\nTo convert between data types we can use the `as.____()` functions. These include: `as.Date()`, `as.numeric()`, and `as.factor()`. Additionally, other helpful functions include factor() which adds levels to the data and `nchar()` which provides the length of the data.\n\n### Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 45\n```\n:::\n\n```{.r .cell-code}\nas.logical(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nas.logical(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nnchar(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}