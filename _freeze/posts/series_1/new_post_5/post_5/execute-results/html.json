{
  "hash": "77f0c0f2bb93c17c99fef8c0294b8391",
  "result": {
    "markdown": "---\ntitle: \"The Basics of R and RStudio\"\nsubtitle: \"Part 4: Operators\"\nauthor: \"William Okech\"\ndate: \"2022-11-09\"\nimage: \"r_and_rstudio.png\"\ncategories: [RStudio, R, Tutorial, Blog]\ntoc: true\ndraft: false\n---\n\n\n## Introduction\n\nR has many different types of operators that can perform different tasks.\n\nHere we will focus on 5 major types of operators. The major types of operators are:\n\n1.  Arithmetic,\n\n2.  Relational,\n\n3.  Logical,\n\n4.  Assignment, and\n\n5.  Miscellaneous.\n\n## 1. Arithmetic Operators\n\nArithmetic operators are used to perform mathematical operations. These operators have been highlighted in [Part 1](/posts/series_1/new_post_2/post_2.html) of the series.\n\n## 2. Relational Operators\n\nRelational operators are used to find the relationship between 2 variables and compare objects. The output of these comparisons is Boolean (`TRUE` or `FALSE`). The table below describes the most common relational operators.\n\n| Relational Operator |       Description        |\n|:-------------------:|:------------------------:|\n|         \\<          |        Less than         |\n|         \\>          |       Greater than       |\n|         \\<=         |  Less than or equal to   |\n|         \\>=         | Greater than or equal to |\n|         ==          |         Equal to         |\n|         !=          |       Not Equal to       |\n\nAssign values to variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 227\ny <- 639\n```\n:::\n\n\n### a. Less than\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx < y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n### b. Greater than\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx > y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n### c. Less than or equal to\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <= 300\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n### d. Greater than or equal to\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny >= 700\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n### e. Equal to\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny == 639\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n### f. Not Equal to\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx != 227\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## 3. Logical Operators\n\nLogical operators are used to specify multiple conditions between objects. Logical operators work with basic data types such as logical, numeric, and complex data types. This returns `TRUE` or `FALSE` values. Numbers greater that `1` are `TRUE` and `0` equals `FALSE`. The table below describes the most common logical operators.\n\n| Logical Operator |       Description        |\n|:----------------:|:------------------------:|\n|        !         |       Logical NOT        |\n|        \\|        | Element-wise logical OR  |\n|       \\|\\|       |        Logical OR        |\n|        &         | Element-wise logical AND |\n|        &&        |       Logical AND        |\n\nAssign vectors to variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_1 <- c(0,2)\nvector_2 <- c(1,0)\n```\n:::\n\n\n### a. Logical NOT\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!vector_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\n!vector_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE\n```\n:::\n:::\n\n\n### b. Logical OR\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_1 | vector_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE\n```\n:::\n:::\n\n\n### c. Logical AND\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_1 & vector_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE\n```\n:::\n:::\n\n\n### d. Element-wise logical OR\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_1 || vector_2\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in vector_1 || vector_2: 'length(x) = 2 > 1' in coercion to 'logical(1)'\n\nWarning in vector_1 || vector_2: 'length(x) = 2 > 1' in coercion to 'logical(1)'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n### d. Element-wise logical AND\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_1 && vector_2\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in vector_1 && vector_2: 'length(x) = 2 > 1' in coercion to 'logical(1)'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## 4. Assignment Operators\n\nThese operators assign values to variables. A more comprehensive review can be obtained in [Part 2](/posts/series_1/new_post_3/post_3.html) of the series.\n\n## 5. Miscellaneous Operators\n\nThese are helpful operators for working in that can perform a variety of functions. A few common miscellaneous operators are described below.\n\n| Miscellaneous Operator |                          Description                           |\n|:----------------------:|:--------------------------------------------------------------:|\n|          %\\*%          | Matrix multiplication (to be discussed in subsequent chapters) |\n|          %in%          |               Does an element belong to a vector               |\n|           :            |                      Generate a sequence                       |\n\n### a. Sequence\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1:8\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5 6 7 8\n```\n:::\n\n```{.r .cell-code}\nb <- 4:10\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n### b. Element in a vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\na %in% b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\n9 %in% b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n9 %in% a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}