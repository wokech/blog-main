{
  "hash": "0e02d73e09636d1249ad565a1bb6b42a",
  "result": {
    "markdown": "---\ntitle: \"The Basics of R and RStudio\"\nsubtitle: \"Part 5: Vectors\"\nauthor: \"William Okech\"\ndate: \"2022-11-12\"\nimage: \"r_and_rstudio.png\"\ncategories: [RStudio, R, Tutorial, Blog]\ntoc: true\ndraft: false\n---\n\n\n## Introduction\n\nA vector is a collection of elements of the same data type, and they are a basic data structure in R programming. Vectors cannot be of mixed data type. The most common way to create a vector is with `c()`, where \"c\" stands for combine. In R, vectors do not have dimensions; therefore, they cannot be defined by columns or rows. Vectors can be divided into atomic vectors and lists (discussed in [Part 7](posts/series_1/new_post_8/post_8.html)). The atomic vectors include logical, character, and numeric (integer or double).\n\nAdditionally, R is a vectorized language because mathematical operations are applied to each element of the vector without the need to loop through the vector.\n\nExamples • Numbers: c(2, 10, 16, -5) • Characters: c(\"R\", \"RStudio\", \"Shiny\", \"Quarto\") • Logicals: c(\"TRUE\", \"FALSE\", \"TRUE\")\n\nTo generate a vector with a sequence of consecutive numbers, we can use `:`, `sequence()`, or `seq()`.\n\nExamples\n\nGenerate a sequence using `:`\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 9:18\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  9 10 11 12 13 14 15 16 17 18\n```\n:::\n\n```{.r .cell-code}\na_rev <- 18:9\na_rev\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 18 17 16 15 14 13 12 11 10  9\n```\n:::\n\n```{.r .cell-code}\na_rev_minus <- 5:-3\na_rev_minus\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5  4  3  2  1  0 -1 -2 -3\n```\n:::\n:::\n\n\nGenerate a sequence using `sequence()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- sequence(7)\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5 6 7\n```\n:::\n\n```{.r .cell-code}\nc<- sequence(c(5,9))\nc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 2 3 4 5 1 2 3 4 5 6 7 8 9\n```\n:::\n:::\n\n\nThe `seq()` function has four main arguments: seq(from, to, by, length.out), where \"from\" and \"to\" are the starting and ending elements of the sequence. Additionally, \"by\" is the difference between the elements, and \"length.out\" is the maximum length of the vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- seq(2,20,by=2)\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  2  4  6  8 10 12 14 16 18 20\n```\n:::\n\n```{.r .cell-code}\nf <- seq(2,20, length.out=5)\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2.0  6.5 11.0 15.5 20.0\n```\n:::\n\n```{.r .cell-code}\nh<- seq(20,2,by=-2)\nh\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 20 18 16 14 12 10  8  6  4  2\n```\n:::\n\n```{.r .cell-code}\nj <- seq(20, 2, length.out=3)\nj\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20 11  2\n```\n:::\n:::\n\n\nTo create a repeating vector, we can use `rep()`.\n\nExamples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- rep(c(0,3,6), times = 3)\nk\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 3 6 0 3 6 0 3 6\n```\n:::\n\n```{.r .cell-code}\nl <- rep(2:6, each = 3)\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6\n```\n:::\n\n```{.r .cell-code}\nm <- rep(7:10, length.out = 20)\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  7  8  9 10  7  8  9 10  7  8  9 10  7  8  9 10  7  8  9 10\n```\n:::\n:::\n\n\n## Vector Operations\n\nVectors of equal length can be operated on together. If one vector is shorter, it will get recycled, as its elements are repeated until it matches the elements of the longer vector. When using vectors of unequal lengths, it would be ideal if the longer vector is a multiple of the shorter vector.\n\nExamples of vector operations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_1 <- 1:10\n\nvec_1*12 # multiplication\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  12  24  36  48  60  72  84  96 108 120\n```\n:::\n\n```{.r .cell-code}\nvec_1+12 # addition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 13 14 15 16 17 18 19 20 21 22\n```\n:::\n\n```{.r .cell-code}\nvec_1-12 # subtraction\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] -11 -10  -9  -8  -7  -6  -5  -4  -3  -2\n```\n:::\n\n```{.r .cell-code}\nvec_1/3 # division\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.3333333 0.6666667 1.0000000 1.3333333 1.6666667 2.0000000 2.3333333\n [8] 2.6666667 3.0000000 3.3333333\n```\n:::\n\n```{.r .cell-code}\nvec_1^4 # power\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]     1    16    81   256   625  1296  2401  4096  6561 10000\n```\n:::\n\n```{.r .cell-code}\nsqrt(vec_1) # square root\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n```\n:::\n:::\n\n\nAdditionally, we can perform operations on two vectors of equal length. Create two vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_3 <- 5:14\nvec_3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  5  6  7  8  9 10 11 12 13 14\n```\n:::\n\n```{.r .cell-code}\nvec_4 <- 12:3\nvec_4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 12 11 10  9  8  7  6  5  4  3\n```\n:::\n:::\n\n\nPerform various operations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_3 + vec_4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 17 17 17 17 17 17 17 17 17 17\n```\n:::\n\n```{.r .cell-code}\nvec_3 - vec_4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] -7 -5 -3 -1  1  3  5  7  9 11\n```\n:::\n\n```{.r .cell-code}\nvec_3 / vec_4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.4166667 0.5454545 0.7000000 0.8888889 1.1250000 1.4285714 1.8333333\n [8] 2.4000000 3.2500000 4.6666667\n```\n:::\n\n```{.r .cell-code}\nvec_3 * vec_4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 60 66 70 72 72 70 66 60 52 42\n```\n:::\n\n```{.r .cell-code}\nvec_3 ^ vec_4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 244140625 362797056 282475249 134217728  43046721  10000000   1771561\n [8]    248832     28561      2744\n```\n:::\n:::\n\n\n### Functions applied to vectors\n\nThe functions listed below can be applied to vectors:\n\n1.  `any()`\n\n2.  `all()`\n\n3.  `nchar()`\n\n4.  `length()`\n\n5.  `typeof()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(vec_3 > vec_4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nany(vec_3 < vec_4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nall(vec_3 > vec_4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nall(vec_3 < vec_4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(vec_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nlength(vec_4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(vec_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(vec_4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\nDetermine the number of letters in a character\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_5 <- c(\"R\", \"RStudio\", \"Shiny\", \"Quarto\")\nnchar(vec_5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 7 5 6\n```\n:::\n:::\n\n\nRecycling of vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_3 + c(10, 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 15 26 17 28 19 30 21 32 23 34\n```\n:::\n\n```{.r .cell-code}\nvec_3 + c(10, 20, 30) # will result in a warning as the longer vector is not a multiple of the shorter one\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in vec_3 + c(10, 20, 30): longer object length is not a multiple of\nshorter object length\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 15 26 37 18 29 40 21 32 43 24\n```\n:::\n:::\n\n\nAccessing elements of a vector\n\nTo access the elements of a vector, we can use numeric-, character-, or logical-based indexing.\n\nExamples\n\nName the columns of a vector with `names()`\n\nCreate the vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_name <- 1:5\nvec_name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\nName individual elements\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(vec_name) <- c(\"a\", \"c\", \"e\", \"g\", \"i\")\nvec_name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na c e g i \n1 2 3 4 5 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_index <- 1:5\nvec_index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\nLogical vector as an index\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_index[c(TRUE, FALSE, TRUE, FALSE, TRUE)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5\n```\n:::\n:::\n\n\nFilter vector based on an index\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_index[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n:::\n\n\nAccess a vector using its position\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_index[4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nvec_index[c(2,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4\n```\n:::\n:::\n\n\nModify a vector using indexing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nvec_index[5] <- 1000\nvec_index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]    1    2    3    4 1000\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}