{
  "hash": "96506732f81881ed9f01db0aed868090",
  "result": {
    "markdown": "---\ntitle: \"The Basics of R and RStudio\"\nsubtitle: \"Part 2: Variables\"\nauthor: \"William Okech\"\ndate: \"2022-06-22\"\nimage: \"r_and_rstudio.png\"\ncategories: [RStudio, R, Tutorial, Blog]\ntoc: true\ndraft: false\n---\n\n\n## Introduction\n\nVariables are instrumental in programming because they are used as \"containers\" to store data values. To assign a value to a variable, we can use `<−` or `=`. However, most R users prefer to use `<−`.\n\nExamples of variable assignment\n\n1.  Using `<-`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable_1 <- 5\nvariable_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n2.  Using `=`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable_2 = 10\nvariable_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n3.  Reverse the value and variable with `->`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n15 -> variable_3\nvariable_3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n:::\n\n\n4.  Assign two variables to one value\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable_4 <- variable_5 <- 30\nvariable_4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30\n```\n:::\n\n```{.r .cell-code}\nvariable_5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30\n```\n:::\n:::\n\n\nThe output of the variable can then be obtained by:\n\n1.  Typing the variable name and then pressing \"Enter,\"\n2.  Typing \"print\" with the variable name in brackets, `print(variable)`, and\n3.  Typing \"View\" with the variable name in brackets, `View(variable)`.\n\nBoth `print()` and `View()` are some of the many built-in functions[^1] available in R.\n\n[^1]: Functions are a collection of statements (organized and reusable code) that perform a specific task, and R has many built-in functions.\n\nIn RStudio, the list of variables that have been loaded can be viewed in the environment pane.\n\n![](env_pane_1.png){fig-align=\"center\" width=\"90%\"}\n\nA screenshot of the environment pane with the stored variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(variable_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nView(variable_2)\n```\n:::\n\n\nOutput of `View()` will be seen in the script pane\n\n## The `assign()` and `rm()` functions\n\nIn addition to using the assignment operators (`<-` and `=`), we can use the `assign()` function to assign a value to a variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassign(\"variable_6\", 555)\nvariable_6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 555\n```\n:::\n:::\n\n\nTo remove the assignment of the value to the variable, either delete the variable in the \"environment pane\" or use the `rm()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable_7 <- 159\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(variable_7)\n```\n:::\n\n\nAfter running `rm()` look at the environment pane to confirm whether `variable_7` has been removed.\n\n## Naming variables\n\nAt this point, you may be wondering what conventions are used for naming variables. First, variables need to have meaningful names such as current_temp, time_24_hr, or weight_lbs. However, we need to be mindful of the [variable](https://web.stanford.edu/class/cs109l/unrestricted/resources/google-style.html) [style guide](http://adv-r.had.co.nz/Style.html) which provides us with the appropriate rules for naming variables.\n\nSome rules to keep in mind are:\n\n1.  R is case-sensitive (`variable` is not the same as `Variable`),\n2.  Names similar to typical outputs or functions (`TRUE`, `FALSE`, `if`, or `else`) cannot be used,\n3.  Appropriate variable names can contain letters, numbers, dots, and underscores. However, you cannot start with an underscore, number, or dot followed by a number.\n\n**Examples of valid and invalid names**\n\nValid names = time_24_hr / .time24_hr\n\nInvalid names = \\_24_hr.time / 24_hr_time / .24_hr_time\n\n## Summary\n\nOverall, variables are very useful for programming in R/RStudio. These variables need to be named appropriately according to accepted conventions.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}