{
  "hash": "6fe94ddc5235f1c91eeedc718ed330f0",
  "result": {
    "markdown": "---\ntitle: \"The Basics of R and RStudio\"\nsubtitle: \"Part 7: Data Structures\"\nauthor: \"William Okech\"\ndate: \"2022-11-16\"\nimage: \"r_and_rstudio.png\"\ncategories: [RStudio, R, Tutorial, Blog]\ntoc: true\ndraft: false\n---\n\n\n## Introduction\n\nData structures in R are tools for storing and organizing multiple values.\n\nThey help to organize stored data in a way that the data can be used more effectively. Data structures vary according to the number of dimensions and the data types (heterogeneous or homogeneous) contained. The primary data structures are:\n\n1.  Vectors ([link](https://www.williamokech.com/posts/series_1/new_post_6/post_6.html))\n\n2.  Lists\n\n3.  Data frames\n\n4.  Matrices\n\n5.  Arrays\n\n6.  Factors\n\n## Data structures\n\n### 1. Vectors\n\nDiscussed in a previous [post](posts/series_1/new_post_6/post_6.html)\n\n### 2. Lists\n\nLists are objects/containers that hold elements of the same or different types. They can containing strings, numbers, vectors, matrices, functions, or other lists. Lists are created with the `list()` function\n\n#### Examples\n\n#### a. Three element list\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_1 <- list(10, 30, 50)\n```\n:::\n\n\n#### b. Single element list\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_2 <- list(c(10, 30, 50))\n```\n:::\n\n\n#### c. Three element list\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_3 <- list(1:3, c(50,40), 3:-5)\n```\n:::\n\n\n#### d. List with elements of different types\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_4 <- list(c(\"a\", \"b\", \"c\"), 5:-1)\n```\n:::\n\n\n#### e. List which contains a list\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_5 <- list(c(\"a\", \"b\", \"c\"), 5:-1, list_1)\n```\n:::\n\n\n#### f. Set names for the list elements\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(list_5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nnames(list_5) <- c(\"character vector\", \"numeric vector\", \"list\")\nnames(list_5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character vector\" \"numeric vector\"   \"list\"            \n```\n:::\n:::\n\n\n#### g. Access elements\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_5[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"b\" \"c\"\n```\n:::\n\n```{.r .cell-code}\nlist_5[[\"character vector\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"b\" \"c\"\n```\n:::\n:::\n\n\n#### h. Length of list\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(list_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nlength(list_5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n### 3. Data frames\n\nA data frame is one of the most common data objects used to store tabular data in R. Tabular data has rows representing observations and columns representing variables. Dataframes contain lists of equal-length vectors. Each column holds a different type of data, but within each column, the elements must be of the same type. The most common data frame characteristics are listed below:\n\n• Columns should have a name;\n\n• Row names should be unique;\n\n• Various data can be stored (such as numeric, factor, and character);\n\n• The individual columns should contain the same number of data items.\n\n### Creation of data frames\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevel <- c(\"Low\", \"Mid\", \"High\")\nlanguage <- c(\"R\", \"RStudio\", \"Shiny\")\nage <- c(25, 36, 47)\n\ndf_1 <- data.frame(level, language, age)\n```\n:::\n\n\n### Functions used to manipulate data frames\n\n#### a. Number of rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(df_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n#### b. Number of columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(df_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n#### c. Dimensions\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(df_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 3\n```\n:::\n:::\n\n\n#### d. Class of data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(df_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n\n#### e. Column names\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"level\"    \"language\" \"age\"     \n```\n:::\n:::\n\n\n#### f. Row names\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(df_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\"\n```\n:::\n:::\n\n\n#### g. Top and bottom values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df_1, n=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  level language age\n1   Low        R  25\n2   Mid  RStudio  36\n```\n:::\n\n```{.r .cell-code}\ntail(df_1, n=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  level language age\n2   Mid  RStudio  36\n3  High    Shiny  47\n```\n:::\n:::\n\n\n#### h. Access columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_1$level\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Low\"  \"Mid\"  \"High\"\n```\n:::\n:::\n\n\n#### i. Access individual elements\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_1[3,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Shiny\"\n```\n:::\n\n```{.r .cell-code}\ndf_1[2, 1:2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  level language\n2   Mid  RStudio\n```\n:::\n:::\n\n\n#### j. Access columns with index\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_1[, 3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25 36 47\n```\n:::\n\n```{.r .cell-code}\ndf_1[, c(\"language\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"R\"       \"RStudio\" \"Shiny\"  \n```\n:::\n:::\n\n\n#### k. Access rows with index\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_1[2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  level language age\n2   Mid  RStudio  36\n```\n:::\n:::\n\n\n### 4. Matrices\n\nA matrix is a rectangular two-dimensional (2D) homogeneous data set containing rows and columns. It contains real numbers that are arranged in a fixed number of rows and columns. Matrices are generally used for various mathematical and statistical applications.\n\n#### a. Creation of matrices\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- matrix(1:9, nrow = 3, ncol = 3) \nm2 <- matrix(21:29, nrow = 3, ncol = 3) \nm3 <- matrix(1:12, nrow = 2, ncol = 6)\n```\n:::\n\n\n#### b. Obtain the dimensions of the matrices\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# m1\nnrow(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nncol(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\ndim(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 3\n```\n:::\n\n```{.r .cell-code}\n# m3\nnrow(m3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nncol(m3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\ndim(m3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 6\n```\n:::\n:::\n\n\n#### c. Arithmetic with matrices\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1+m2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]   22   28   34\n[2,]   24   30   36\n[3,]   26   32   38\n```\n:::\n\n```{.r .cell-code}\nm1-m2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]  -20  -20  -20\n[2,]  -20  -20  -20\n[3,]  -20  -20  -20\n```\n:::\n\n```{.r .cell-code}\nm1*m2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]   21   96  189\n[2,]   44  125  224\n[3,]   69  156  261\n```\n:::\n\n```{.r .cell-code}\nm1/m2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]      [,2]      [,3]\n[1,] 0.04761905 0.1666667 0.2592593\n[2,] 0.09090909 0.2000000 0.2857143\n[3,] 0.13043478 0.2307692 0.3103448\n```\n:::\n\n```{.r .cell-code}\nm1 == m2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1]  [,2]  [,3]\n[1,] FALSE FALSE FALSE\n[2,] FALSE FALSE FALSE\n[3,] FALSE FALSE FALSE\n```\n:::\n:::\n\n\n#### d. Matrix multiplication\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm5 <- matrix(1:10, nrow = 5)\nm6 <- matrix(43:34, nrow = 5)\n\nm5*m6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]   43  228\n[2,]   84  259\n[3,]  123  288\n[4,]  160  315\n[5,]  195  340\n```\n:::\n\n```{.r .cell-code}\n# m5%*%m6 will not work because of the dimesions.\n# the vector m6 needs to be transposed.\n\n# Transpose\nm5%*%t(m6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]  271  264  257  250  243\n[2,]  352  343  334  325  316\n[3,]  433  422  411  400  389\n[4,]  514  501  488  475  462\n[5,]  595  580  565  550  535\n```\n:::\n:::\n\n\n#### e. Generate an identity matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiag(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    1    0    0    0\n[3,]    0    0    1    0    0\n[4,]    0    0    0    1    0\n[5,]    0    0    0    0    1\n```\n:::\n:::\n\n\n#### f. Column and row names\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(m5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nrownames(m6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n### 5. Arrays\n\nAn array is a multidimensional vector that stores homogeneous data. It can be thought of as a stacked matrix and stores data in more than 2 dimensions (n-dimensional). An array is composed of rows by columns by dimensions. Example: an array with dimensions, dim = c(2,3,3), has 2 rows, 3 columns, and 3 matrices.\n\n#### a. Creating arrays\n\n\n::: {.cell}\n\n```{.r .cell-code}\narr_1 <- array(1:12, dim = c(2,3,2))\n\narr_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12\n```\n:::\n:::\n\n\n#### b. Filter array by index\n\n\n::: {.cell}\n\n```{.r .cell-code}\narr_1[1, , ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    7\n[2,]    3    9\n[3,]    5   11\n```\n:::\n\n```{.r .cell-code}\narr_1[1, ,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5\n```\n:::\n\n```{.r .cell-code}\narr_1[, , 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n:::\n\n\n### 6. Factors\n\nFactors are used to store integers or strings which are categorical. They categorize data and store the data in different levels. This form of data storage is useful for statistical modeling. Examples include TRUE or FALSE and male or female.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector <- c(\"Male\", \"Female\")\nfactor_1 <- factor(vector)\nfactor_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Male   Female\nLevels: Female Male\n```\n:::\n:::\n\n\nOR\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor_2 <- as.factor(vector)\nfactor_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Male   Female\nLevels: Female Male\n```\n:::\n\n```{.r .cell-code}\nas.numeric(factor_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 1\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}