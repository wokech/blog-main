---
title: "The Basics of R and RStudio"
subtitle: "Part 5: Vectors"
author: "William Okech"
date: "2022-11-12"
image: "r_and_rstudio.png"
categories: [RStudio, R, Tutorial, Blog]
toc: true
draft: false
---

## Introduction

A vector is a collection of elements of the same data type, and they are a basic data structure in R programming.

Vectors cannot be of mixed data type. The most common way to create a vector is with `c()`, where "c" stands for combine. In R, vectors do not have dimensions; therefore, they cannot be defined by columns or rows. Vectors can be divided into atomic vectors and lists (discussed in [Part 7](posts/series_1/new_post_8/post_8.html)). The atomic vectors include logical, character, and numeric (integer or double).

Additionally, R is a vectorized language because mathematical operations are applied to each element of the vector without the need to loop through the vector.Examples of vectors are shown below:

• Numbers: `c(2, 10, 16, -5)`

• Characters: `c("R", "RStudio", "Shiny", "Quarto")`

• Logicals: `c("TRUE", "FALSE", "TRUE")`

## Sequence Generation

To generate a vector with a sequence of consecutive numbers, we can use `:`, `sequence()`, or `seq()`.

### Generate a sequence using `:`

```{r}
a <- 9:18
a
a_rev <- 18:9
a_rev
a_rev_minus <- 5:-3
a_rev_minus
```

### Generate a sequence using `sequence()`

```{r}
b <- sequence(7)
b
c <- sequence(c(5,9))
c
```

### Generate a sequence using `seq()`

The `seq()` function has four main arguments: seq(from, to, by, length.out), where "from" and "to" are the starting and ending elements of the sequence. Additionally, "by" is the difference between the elements, and "length.out" is the maximum length of the vector.

```{r}
d <- seq(2,20,by=2)
d
f <- seq(2,20, length.out=5)
f
h <- seq(20,2,by=-2)
h
j <- seq(20, 2, length.out=3)
j
```

## Repeating vectors

To create a repeating vector, we can use `rep()`.

```{r}
k <- rep(c(0,3,6), times = 3)
k
l <- rep(2:6, each = 3)
l
m <- rep(7:10, length.out = 20)
m
```

## Vector Operations

Vectors of equal length can be operated on together. If one vector is shorter, it will get recycled, as its elements are repeated until it matches the elements of the longer vector. When using vectors of unequal lengths, it would be ideal if the longer vector is a multiple of the shorter vector.

### Basic Vector Operations

```{r}
vec_1 <- 1:10

vec_1*12 # multiplication
vec_1+12 # addition
vec_1-12 # subtraction
vec_1/3 # division
vec_1^4 # power
sqrt(vec_1) # square root
```

### Operations on vectors of equal length

Additionally, we can perform operations on two vectors of equal length.

1.  Create two vectors

```{r}
vec_3 <- 5:14
vec_3
vec_4 <- 12:3
vec_4
```

2.  Perform various arithmetic operations

```{r}
vec_3 + vec_4
vec_3 - vec_4
vec_3 / vec_4
vec_3 * vec_4
vec_3 ^ vec_4
```

## Functions that can be applied to vectors

The functions listed below can be applied to vectors:

1.  `any()`

2.  `all()`

3.  `nchar()`

4.  `length()`

5.  `typeof()`

### Examples

```{r}
any(vec_3 > vec_4)
any(vec_3 < vec_4)
```

```{r}
all(vec_3 > vec_4)
all(vec_3 < vec_4)
```

```{r}
length(vec_3)
length(vec_4)
```

```{r}
typeof(vec_3)
typeof(vec_4)
```

Determine the number of letters in a character

```{r}
vec_5 <- c("R", "RStudio", "Shiny", "Quarto")
nchar(vec_5)
```

## Recycling of vectors

```{r}
vec_3 + c(10, 20)
vec_3 + c(10, 20, 30) # will result in a warning as the longer vector is not a multiple of the shorter one
```

## Accessing elements of a vector

To access the elements of a vector, we can use numeric-, character-, or logical-based indexing.

### Examples

#### 1. Name the columns of a vector with `names()`.

Create the vector.

```{r}
vec_name <- 1:5
vec_name
```

Name the individual elements.

```{r}
names(vec_name) <- c("a", "c", "e", "g", "i")
vec_name
```

#### 2. Use the vector index to filter

```{r}
vec_index <- 1:5
vec_index
```

##### a) Logical vector as an index

```{r}
vec_index[c(TRUE, FALSE, TRUE, FALSE, TRUE)]
```

##### b) Filter vector based on an index

```{r}
vec_index[1:3]
```

##### c) Access a vector using its position

```{r}
vec_index[4]
vec_index[c(2,4)]
```

##### d) Modify a vector using indexing

```{r}
vec_index
vec_index[5] <- 1000
vec_index
```
